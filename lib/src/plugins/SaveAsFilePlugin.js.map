{"version":3,"sources":["../../../src/plugins/SaveAsFilePlugin.js"],"names":["_","fs","require","path","mkdirp","SaveAsFilePlugin","constructor","config","name","defaults","defaultsDeep","dataKey","extension","outputDir","getSettings","request","settings","saveAs","runAsync","response","logger","fileContent","isRequestData","isEmpty","isString","fileName","isFunction","call","inputPath","getFileName","dataSettings","saveAsFile","file","extname","basename","data","absoluteOutputDir","resolve","process","cwd","Promise","reject","err","writeFile","log","module","exports"],"mappings":"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","file":"SaveAsFilePlugin.js","sourcesContent":["let fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport * as _ from \"lodash\";\n\nclass SaveAsFilePlugin {\n    constructor(config) {\n        this.name = \"SaveAsFilePlugin\";\n        this.defaults = _.defaultsDeep({}, config, {\n            dataKey: \"test\",\n            extension: \".txt\",\n            outputDir: \"./output\"\n        });\n    }\n    // there can be several instances of this plugin in the same ArgdownApplication\n    // Because of this, we can not add the instance default settings to the request object as in other plugins\n    // Instead we have to add it each time the getSettings method is called to avoid keeping request specific state\n    getSettings(request) {\n        let settings = {};\n        if (request.saveAs) {\n            settings = request.saveAs;\n        } else if (request.SaveAsFilePlugin) {\n            settings = request.SaveAsFilePlugin;\n        }\n        settings = _.defaultsDeep({}, settings, this.defaults);\n        return settings;\n    }\n    async runAsync(request, response, logger) {\n        const settings = this.getSettings(request);\n        let fileContent = !settings.isRequestData ? response[settings.dataKey] : request[settings.dataKey];\n        if (!_.isEmpty(fileContent) && _.isString(fileContent)) {\n            let fileName = \"default\";\n            if (_.isFunction(settings.fileName)) {\n                fileName = settings.fileName.call(this, request, response);\n            } else if (_.isString(settings.fileName)) {\n                fileName = settings.fileName;\n            } else if (request.inputPath) {\n                fileName = this.getFileName(request.inputPath);\n            }\n            let outputDir = settings.outputDir;\n            const dataSettings = !settings.isRequestData ? request[settings.dataKey] : null;\n            if (dataSettings && dataSettings.outputDir) {\n                outputDir = dataSettings.outputDir;\n            }\n            await this.saveAsFile(fileContent, outputDir, fileName, settings.extension, logger);\n        }\n    }\n    getFileName(file) {\n        let extension = path.extname(file);\n        return path.basename(file, extension);\n    }\n    async saveAsFile(data, outputDir, fileName, extension, logger) {\n        let absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n        await new Promise((resolve, reject) => {\n            mkdirp(absoluteOutputDir, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        await new Promise((resolve, reject) => {\n            fs.writeFile(absoluteOutputDir + \"/\" + fileName + extension, data, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                logger.log(\"verbose\", \"Saved \" + absoluteOutputDir + \"/\" + fileName + extension);\n                resolve();\n            });\n        });\n    }\n}\n\nmodule.exports = {\n    SaveAsFilePlugin: SaveAsFilePlugin\n};\n"]}