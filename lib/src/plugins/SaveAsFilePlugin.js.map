{"version":3,"sources":["../../../src/plugins/SaveAsFilePlugin.js"],"names":["_","fs","require","path","mkdirp","SaveAsFilePlugin","config","previousSettings","settings","dataKey","fileName","extension","outputDir","defaultsDeep","name","data","verbose","saveAs","fileContent","isEmpty","isString","sourceFile","getFileName","isFunction","call","input","saveAsFile","file","extname","basename","err","console","log","writeFile","module","exports"],"mappings":"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","file":"SaveAsFilePlugin.js","sourcesContent":["let fs = require('fs');\nlet path = require('path');\nlet mkdirp = require('mkdirp');\nimport * as _ from 'lodash';\n\nclass SaveAsFilePlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        dataKey : \"test\",\n        fileName : \"default\",\n        extension : \".txt\",\n        outputDir : \".\"\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  constructor(config){\n    this.name = \"SaveAsFilePlugin\";\n    this.config = config;\n  }\n  run(data){\n    let verbose = false;\n    if(data.config){\n      if(data.config.saveAs){\n        this.config = data.config.saveAs;\n      }else if(data.config.SaveAsFilePlugin){\n        this.config = data.config.SaveAsFilePlugin;\n      }\n      verbose = data.config.verbose;\n    }\n    \n    let fileContent = data[this.settings.dataKey];\n    if(!_.isEmpty(fileContent) && _.isString(fileContent)){\n      let fileName = \"default\";\n      if(!_.isEmpty(this.settings.sourceFile) && _.isString(this.settings.sourceFile)){\n        fileName = this.getFileName(this.settings.sourceFile);\n      }else if(_.isFunction(this.settings.fileName)){\n        fileName = this.settings.fileName.call(this, data);\n      }else if(_.isString(this.settings.fileName)){\n        fileName = this.settings.fileName;\n      }else if(data.config && data.config.input){\n        fileName = this.getFileName(data.config.input);\n      }\n      this.saveAsFile(fileContent, this.settings.outputDir, fileName, this.settings.extension, verbose);\n    }\n  }\n  getFileName(file){\n    let extension = path.extname(file);\n    return path.basename(file,extension);\n  }\n  saveAsFile(data, outputDir, fileName, extension, verbose){\n    mkdirp(outputDir, function (err) {\n      if (err){\n        console.log(err);\n      }else{\n        fs.writeFile(outputDir +'/'+fileName+extension, data, function(err) {\n            if(err) {\n                return console.log(err);\n            }\n            if(verbose){\n              console.log(\"Saved \"+outputDir+\"/\"+fileName+extension);          \n            }\n        });        \n      }\n    });\n  }\n}\n\nmodule.exports = {\n  SaveAsFilePlugin: SaveAsFilePlugin\n}\n"]}