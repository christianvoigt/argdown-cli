{"version":3,"sources":["../../../src/plugins/SaveAsFilePlugin.js"],"names":["_","fs","require","path","mkdirp","SaveAsFilePlugin","constructor","config","name","defaults","defaultsDeep","dataKey","extension","outputDir","getSettings","request","settings","saveAs","runAsync","response","logger","fileContent","isRequestData","isEmpty","isString","dataSettings","fileName","outputPath","getFileName","dirname","isFunction","call","inputPath","saveAsFile","file","extname","basename","data","absoluteOutputDir","resolve","process","cwd","Promise","reject","err","writeFile","log","module","exports"],"mappings":"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","file":"SaveAsFilePlugin.js","sourcesContent":["let fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport * as _ from \"lodash\";\n\nclass SaveAsFilePlugin {\n  constructor(config) {\n    this.name = \"SaveAsFilePlugin\";\n    this.defaults = _.defaultsDeep({}, config, {\n      dataKey: \"test\",\n      extension: \".txt\",\n      outputDir: \"./output\"\n    });\n  }\n  // there can be several instances of this plugin in the same ArgdownApplication\n  // Because of this, we can not add the instance default settings to the request object as in other plugins\n  // Instead we have to add it each time the getSettings method is called to avoid keeping request specific state\n  getSettings(request) {\n    let settings = {};\n    if (request.saveAs) {\n      settings = request.saveAs;\n    } else if (request.SaveAsFilePlugin) {\n      settings = request.SaveAsFilePlugin;\n    }\n    settings = _.defaultsDeep({}, settings, this.defaults);\n    return settings;\n  }\n  async runAsync(request, response, logger) {\n    const settings = this.getSettings(request);\n    let fileContent = !settings.isRequestData\n      ? response[settings.dataKey]\n      : request[settings.dataKey];\n    if (!_.isEmpty(fileContent) && _.isString(fileContent)) {\n      const dataSettings = !settings.isRequestData\n        ? request[settings.dataKey]\n        : null;\n      let fileName = \"default\";\n      let outputDir = settings.outputDir;\n      if (request.outputPath) {\n        fileName = this.getFileName(request.outputPath);\n        outputDir = path.dirname(request.outputPath);\n      } else if (dataSettings && dataSettings.outputPath) {\n        fileName = this.getFileName(dataSettings.outputPath);\n        outputDir = path.dirname(dataSettings.outputPath);\n      } else if (_.isFunction(settings.fileName)) {\n        fileName = settings.fileName.call(this, request, response);\n      } else if (_.isString(settings.fileName)) {\n        fileName = settings.fileName;\n      } else if (request.inputPath) {\n        fileName = this.getFileName(request.inputPath);\n      }\n      if (dataSettings && dataSettings.outputDir) {\n        outputDir = dataSettings.outputDir;\n      }\n      await this.saveAsFile(\n        fileContent,\n        outputDir,\n        fileName,\n        settings.extension,\n        logger\n      );\n    }\n  }\n  getFileName(file) {\n    let extension = path.extname(file);\n    return path.basename(file, extension);\n  }\n  async saveAsFile(data, outputDir, fileName, extension, logger) {\n    let absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n    await new Promise((resolve, reject) => {\n      mkdirp(absoluteOutputDir, function(err) {\n        if (err) {\n          reject(err);\n        }\n        resolve();\n      });\n    });\n    await new Promise((resolve, reject) => {\n      fs.writeFile(\n        absoluteOutputDir + \"/\" + fileName + extension,\n        data,\n        function(err) {\n          if (err) {\n            reject(err);\n          }\n          logger.log(\n            \"verbose\",\n            \"Saved \" + absoluteOutputDir + \"/\" + fileName + extension\n          );\n          resolve();\n        }\n      );\n    });\n  }\n}\n\nmodule.exports = {\n  SaveAsFilePlugin: SaveAsFilePlugin\n};\n"]}