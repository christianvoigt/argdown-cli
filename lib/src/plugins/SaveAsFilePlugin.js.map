{"version":3,"sources":["../../../src/plugins/SaveAsFilePlugin.js"],"names":["_","fs","require","path","mkdirp","SaveAsFilePlugin","config","previousSettings","settings","dataKey","extension","outputDir","defaultsDeep","constructor","name","runAsync","request","response","logger","saveAs","fileContent","isRequestData","isEmpty","isString","fileName","isFunction","call","inputPath","getFileName","dataSettings","saveAsFile","file","extname","basename","data","absoluteOutputDir","resolve","process","cwd","Promise","reject","err","writeFile","log","module","exports"],"mappings":";;AAGA;;IAAYA,C;;;;AAHZ,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;;;AAGA,MAAMG,gBAAN,CAAuB;AACnB,QAAIC,MAAJ,CAAWA,MAAX,EAAmB;AACf,YAAIC,mBAAmB,KAAKC,QAA5B;AACA,YAAI,CAACD,gBAAL,EAAuB;AACnBA,+BAAmB;AACfE,yBAAS,MADM;AAEfC,2BAAW,MAFI;AAGfC,2BAAW;AAHI,aAAnB;AAKH;AACD,aAAKH,QAAL,GAAgBR,EAAEY,YAAF,CAAe,EAAf,EAAmBN,MAAnB,EAA2BC,gBAA3B,CAAhB;AACH;AACDM,gBAAYP,MAAZ,EAAoB;AAChB,aAAKQ,IAAL,GAAY,kBAAZ;AACA,aAAKR,MAAL,GAAcA,MAAd;AACH;AACD,UAAMS,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AACtC,YAAIF,QAAQG,MAAZ,EAAoB;AAChB,iBAAKb,MAAL,GAAcU,QAAQG,MAAtB;AACH,SAFD,MAEO,IAAIH,QAAQX,gBAAZ,EAA8B;AACjC,iBAAKC,MAAL,GAAcU,QAAQX,gBAAtB;AACH;;AAED,YAAIe,cAAc,CAAC,KAAKZ,QAAL,CAAca,aAAf,GACZJ,SAAS,KAAKT,QAAL,CAAcC,OAAvB,CADY,GAEZO,QAAQ,KAAKR,QAAL,CAAcC,OAAtB,CAFN;AAGA,YAAI,CAACT,EAAEsB,OAAF,CAAUF,WAAV,CAAD,IAA2BpB,EAAEuB,QAAF,CAAWH,WAAX,CAA/B,EAAwD;AACpD,gBAAII,WAAW,SAAf;AACA,gBAAIxB,EAAEyB,UAAF,CAAa,KAAKjB,QAAL,CAAcgB,QAA3B,CAAJ,EAA0C;AACtCA,2BAAW,KAAKhB,QAAL,CAAcgB,QAAd,CAAuBE,IAAvB,CAA4B,IAA5B,EAAkCV,OAAlC,EAA2CC,QAA3C,CAAX;AACH,aAFD,MAEO,IAAIjB,EAAEuB,QAAF,CAAW,KAAKf,QAAL,CAAcgB,QAAzB,CAAJ,EAAwC;AAC3CA,2BAAW,KAAKhB,QAAL,CAAcgB,QAAzB;AACH,aAFM,MAEA,IAAIR,QAAQW,SAAZ,EAAuB;AAC1BH,2BAAW,KAAKI,WAAL,CAAiBZ,QAAQW,SAAzB,CAAX;AACH;AACD,gBAAIhB,YAAY,KAAKH,QAAL,CAAcG,SAA9B;AACA,kBAAMkB,eAAe,CAAC,KAAKrB,QAAL,CAAca,aAAf,GACfL,QAAQ,KAAKR,QAAL,CAAcC,OAAtB,CADe,GAEf,IAFN;AAGA,gBAAIoB,gBAAgBA,aAAalB,SAAjC,EAA4C;AACxCA,4BAAYkB,aAAalB,SAAzB;AACH;AACD,kBAAM,KAAKmB,UAAL,CACFV,WADE,EAEFT,SAFE,EAGFa,QAHE,EAIF,KAAKhB,QAAL,CAAcE,SAJZ,EAKFQ,MALE,CAAN;AAOH;AACJ;AACDU,gBAAYG,IAAZ,EAAkB;AACd,YAAIrB,YAAYP,KAAK6B,OAAL,CAAaD,IAAb,CAAhB;AACA,eAAO5B,KAAK8B,QAAL,CAAcF,IAAd,EAAoBrB,SAApB,CAAP;AACH;AACD,UAAMoB,UAAN,CAAiBI,IAAjB,EAAuBvB,SAAvB,EAAkCa,QAAlC,EAA4Cd,SAA5C,EAAuDQ,MAAvD,EAA+D;AAC3D,YAAIiB,oBAAoBhC,KAAKiC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B3B,SAA5B,CAAxB;AACA,cAAM,IAAI4B,OAAJ,CAAY,CAACH,OAAD,EAAUI,MAAV,KAAqB;AACnCpC,mBAAO+B,iBAAP,EAA0B,UAASM,GAAT,EAAc;AACpC,oBAAIA,GAAJ,EAAS;AACLD,2BAAOC,GAAP;AACH;AACDL;AACH,aALD;AAMH,SAPK,CAAN;AAQA,cAAM,IAAIG,OAAJ,CAAY,CAACH,OAAD,EAAUI,MAAV,KAAqB;AACnCvC,eAAGyC,SAAH,CACIP,oBAAoB,GAApB,GAA0BX,QAA1B,GAAqCd,SADzC,EAEIwB,IAFJ,EAGI,UAASO,GAAT,EAAc;AACV,oBAAIA,GAAJ,EAAS;AACLD,2BAAOC,GAAP;AACH;AACDvB,uBAAOyB,GAAP,CACI,SADJ,EAEI,WACIR,iBADJ,GAEI,GAFJ,GAGIX,QAHJ,GAIId,SANR;AAQA0B;AACH,aAhBL;AAkBH,SAnBK,CAAN;AAoBH;AArFkB;;AAwFvBQ,OAAOC,OAAP,GAAiB;AACbxC,sBAAkBA;AADL,CAAjB","file":"SaveAsFilePlugin.js","sourcesContent":["let fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport * as _ from \"lodash\";\n\nclass SaveAsFilePlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n                dataKey: \"test\",\n                extension: \".txt\",\n                outputDir: \"./output\"\n            };\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n    }\n    constructor(config) {\n        this.name = \"SaveAsFilePlugin\";\n        this.config = config;\n    }\n    async runAsync(request, response, logger) {\n        if (request.saveAs) {\n            this.config = request.saveAs;\n        } else if (request.SaveAsFilePlugin) {\n            this.config = request.SaveAsFilePlugin;\n        }\n\n        let fileContent = !this.settings.isRequestData\n            ? response[this.settings.dataKey]\n            : request[this.settings.dataKey];\n        if (!_.isEmpty(fileContent) && _.isString(fileContent)) {\n            let fileName = \"default\";\n            if (_.isFunction(this.settings.fileName)) {\n                fileName = this.settings.fileName.call(this, request, response);\n            } else if (_.isString(this.settings.fileName)) {\n                fileName = this.settings.fileName;\n            } else if (request.inputPath) {\n                fileName = this.getFileName(request.inputPath);\n            }\n            let outputDir = this.settings.outputDir;\n            const dataSettings = !this.settings.isRequestData\n                ? request[this.settings.dataKey]\n                : null;\n            if (dataSettings && dataSettings.outputDir) {\n                outputDir = dataSettings.outputDir;\n            }\n            await this.saveAsFile(\n                fileContent,\n                outputDir,\n                fileName,\n                this.settings.extension,\n                logger\n            );\n        }\n    }\n    getFileName(file) {\n        let extension = path.extname(file);\n        return path.basename(file, extension);\n    }\n    async saveAsFile(data, outputDir, fileName, extension, logger) {\n        let absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n        await new Promise((resolve, reject) => {\n            mkdirp(absoluteOutputDir, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        await new Promise((resolve, reject) => {\n            fs.writeFile(\n                absoluteOutputDir + \"/\" + fileName + extension,\n                data,\n                function(err) {\n                    if (err) {\n                        reject(err);\n                    }\n                    logger.log(\n                        \"verbose\",\n                        \"Saved \" +\n                            absoluteOutputDir +\n                            \"/\" +\n                            fileName +\n                            extension\n                    );\n                    resolve();\n                }\n            );\n        });\n    }\n}\n\nmodule.exports = {\n    SaveAsFilePlugin: SaveAsFilePlugin\n};\n"]}