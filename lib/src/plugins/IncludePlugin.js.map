{"version":3,"sources":["../../../src/plugins/IncludePlugin.js"],"names":["_","readFile","path","require","IncludePlugin","config","previousSettings","settings","regEx","defaultsDeep","constructor","name","runAsync","request","response","include","input","inputPath","replaceIncludesAsync","currentFilePath","str","filesAlreadyIncluded","match","directoryPath","dirname","lastIndex","exec","absoluteFilePath","resolve","strToInclude","includes","push","substr","index","length","module","exports"],"mappings":";;AAAA;;;;AACA;;AAIA;;IAAYA,C;;;;;;AAFZ,MAAMC,WAAW,qBAAU,aAAGA,QAAb,CAAjB;AACA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;;;AAGA,MAAMC,aAAN,CAAoB;AAChB,QAAIC,MAAJ,CAAWA,MAAX,EAAmB;AACf,YAAIC,mBAAmB,KAAKC,QAA5B;AACA,YAAI,CAACD,gBAAL,EAAuB;AACnBA,+BAAmB;AACfE,uBAAO;AADQ,aAAnB;AAGH;AACD,aAAKD,QAAL,GAAgBP,EAAES,YAAF,CAAe,EAAf,EAAmBJ,MAAnB,EAA2BC,gBAA3B,CAAhB;AACH;AACDI,gBAAYL,MAAZ,EAAoB;AAChB,aAAKM,IAAL,GAAY,eAAZ;AACA,aAAKN,MAAL,GAAcA,MAAd;AACH;AACD,UAAMO,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkC;AAC9B,YAAID,QAAQE,OAAZ,EAAqB;AACjB,iBAAKV,MAAL,GAAcQ,QAAQE,OAAtB;AACH;AACD,YAAI,CAACF,QAAQG,KAAT,IAAkB,CAACH,QAAQI,SAA/B,EAA0C;AACtC,mBAAOH,QAAP;AACH;AACDD,gBAAQG,KAAR,GAAgB,MAAM,KAAKE,oBAAL,CAClBL,QAAQI,SADU,EAElBJ,QAAQG,KAFU,EAGlB,KAAKT,QAAL,CAAcC,KAHI,EAIlB,EAJkB,CAAtB;AAMA,eAAOM,QAAP;AACH;AACD,UAAMI,oBAAN,CACIC,eADJ,EAEIC,GAFJ,EAGIZ,KAHJ,EAIIa,oBAJJ,EAKE;AACE,YAAIC,QAAQ,IAAZ;AACA,cAAMC,gBAAgBrB,KAAKsB,OAAL,CAAaL,eAAb,CAAtB;AACAX,cAAMiB,SAAN,GAAkB,CAAlB;AACA,eAAQH,QAAQd,MAAMkB,IAAN,CAAWN,GAAX,CAAhB,EAAkC;AAC9B,kBAAMO,mBAAmBzB,KAAK0B,OAAL,CAAaL,aAAb,EAA4BD,MAAM,CAAN,CAA5B,CAAzB;AACA,gBAAIO,eAAe,EAAnB;AACA,gBAAI7B,EAAE8B,QAAF,CAAWT,oBAAX,EAAiCM,gBAAjC,CAAJ,EAAwD;AACpDE,+BACI,gCACAF,gBADA,GAEA,uFAHJ;AAIH,aALD,MAKO;AACHN,qCAAqBU,IAArB,CAA0BJ,gBAA1B;AACAE,+BAAe,MAAM5B,SAAS0B,gBAAT,EAA2B,MAA3B,CAArB;AACA,oBAAIE,gBAAgB,IAApB,EAA0B;AACtBA,mCACI,gCACAF,gBADA,GAEA,oBAHJ;AAIH,iBALD,MAKO;AACHE,mCAAe,MAAM,KAAKX,oBAAL,CACjBS,gBADiB,EAEjBE,YAFiB,EAGjBrB,KAHiB,EAIjBa,oBAJiB,CAArB;AAMH;AACJ;AACDD,kBACIA,IAAIY,MAAJ,CAAW,CAAX,EAAcV,MAAMW,KAApB,IACAJ,YADA,GAEAT,IAAIY,MAAJ,CAAWV,MAAMW,KAAN,GAAcX,MAAM,CAAN,EAASY,MAAlC,CAHJ;AAIA1B,kBAAMiB,SAAN,GAAkBH,MAAMW,KAAN,GAAcJ,aAAaK,MAA7C;AACH;AACD,eAAOd,GAAP;AACH;AAtEe;;AAyEpBe,OAAOC,OAAP,GAAiB;AACbhC,mBAAeA;AADF,CAAjB","file":"IncludePlugin.js","sourcesContent":["import fs from \"fs\";\nimport { promisify } from \"util\";\n\nconst readFile = promisify(fs.readFile);\nlet path = require(\"path\");\nimport * as _ from \"lodash\";\n\nclass IncludePlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n                regEx: /@include\\(([^\\)]+)\\)/g\n            };\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n    }\n    constructor(config) {\n        this.name = \"IncludePlugin\";\n        this.config = config;\n    }\n    async runAsync(request, response) {\n        if (request.include) {\n            this.config = request.include;\n        }\n        if (!request.input || !request.inputPath) {\n            return response;\n        }\n        request.input = await this.replaceIncludesAsync(\n            request.inputPath,\n            request.input,\n            this.settings.regEx,\n            []\n        );\n        return response;\n    }\n    async replaceIncludesAsync(\n        currentFilePath,\n        str,\n        regEx,\n        filesAlreadyIncluded\n    ) {\n        let match = null;\n        const directoryPath = path.dirname(currentFilePath);\n        regEx.lastIndex = 0;\n        while ((match = regEx.exec(str))) {\n            const absoluteFilePath = path.resolve(directoryPath, match[1]);\n            let strToInclude = \"\";\n            if (_.includes(filesAlreadyIncluded, absoluteFilePath)) {\n                strToInclude =\n                    \"<!-- Include failed: File '\" +\n                    absoluteFilePath +\n                    \"' already included. To avoid infinite loops, each file can only be included once. -->\";\n            } else {\n                filesAlreadyIncluded.push(absoluteFilePath);\n                strToInclude = await readFile(absoluteFilePath, \"utf8\");\n                if (strToInclude == null) {\n                    strToInclude =\n                        \"<!-- Include failed: File '\" +\n                        absoluteFilePath +\n                        \"' not found. -->\\n\";\n                } else {\n                    strToInclude = await this.replaceIncludesAsync(\n                        absoluteFilePath,\n                        strToInclude,\n                        regEx,\n                        filesAlreadyIncluded\n                    );\n                }\n            }\n            str =\n                str.substr(0, match.index) +\n                strToInclude +\n                str.substr(match.index + match[0].length);\n            regEx.lastIndex = match.index + strToInclude.length;\n        }\n        return str;\n    }\n}\n\nmodule.exports = {\n    IncludePlugin: IncludePlugin\n};\n"]}