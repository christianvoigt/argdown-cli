{"version":3,"sources":["../../../src/plugins/IncludePlugin.js"],"names":["_","readFile","path","require","IncludePlugin","constructor","config","name","defaults","defaultsDeep","regEx","getSettings","request","include","prepare","runAsync","response","input","inputPath","settings","lastIndex","replaceIncludesAsync","currentFilePath","str","filesAlreadyIncluded","match","directoryPath","dirname","exec","absoluteFilePath","resolve","strToInclude","includes","push","substr","index","length","module","exports"],"mappings":";;AAAA;;;;AACA;;AAIA;;IAAYA,C;;;;;;AAFZ,MAAMC,WAAW,qBAAU,aAAGA,QAAb,CAAjB;AACA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;;;AAGA,MAAMC,aAAN,CAAoB;AAChBC,gBAAYC,MAAZ,EAAoB;AAChB,aAAKC,IAAL,GAAY,eAAZ;AACA,aAAKC,QAAL,GAAgBR,EAAES,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2B;AACvCI,mBAAO;AADgC,SAA3B,CAAhB;AAGH;AACDC,gBAAYC,OAAZ,EAAqB;AACjB,YAAI,CAACA,QAAQC,OAAb,EAAsB;AAClBD,oBAAQC,OAAR,GAAkB,EAAlB;AACH;AACD,eAAOD,QAAQC,OAAf;AACH;AACDC,YAAQF,OAAR,EAAiB;AACbZ,UAAES,YAAF,CAAe,KAAKE,WAAL,CAAiBC,OAAjB,CAAf,EAA0C,KAAKJ,QAA/C;AACH;AACD,UAAMO,QAAN,CAAeH,OAAf,EAAwBI,QAAxB,EAAkC;AAC9B,YAAI,CAACJ,QAAQK,KAAT,IAAkB,CAACL,QAAQM,SAA/B,EAA0C;AACtC,mBAAOF,QAAP;AACH;AACD,cAAMG,WAAW,KAAKR,WAAL,CAAiBC,OAAjB,CAAjB;AACAO,iBAAST,KAAT,CAAeU,SAAf,GAA2B,CAA3B;AACAR,gBAAQK,KAAR,GAAgB,MAAM,KAAKI,oBAAL,CAA0BT,QAAQM,SAAlC,EAA6CN,QAAQK,KAArD,EAA4DE,SAAST,KAArE,EAA4E,EAA5E,CAAtB;AACA,eAAOM,QAAP;AACH;AACD,UAAMK,oBAAN,CAA2BC,eAA3B,EAA4CC,GAA5C,EAAiDb,KAAjD,EAAwDc,oBAAxD,EAA8E;AAC1E,YAAIC,QAAQ,IAAZ;AACA,cAAMC,gBAAgBxB,KAAKyB,OAAL,CAAaL,eAAb,CAAtB;AACAZ,cAAMU,SAAN,GAAkB,CAAlB;AACA,eAAQK,QAAQf,MAAMkB,IAAN,CAAWL,GAAX,CAAhB,EAAkC;AAC9B,kBAAMM,mBAAmB3B,KAAK4B,OAAL,CAAaJ,aAAb,EAA4BD,MAAM,CAAN,CAA5B,CAAzB;AACA,gBAAIM,eAAe,EAAnB;AACA,gBAAI/B,EAAEgC,QAAF,CAAWR,oBAAX,EAAiCK,gBAAjC,CAAJ,EAAwD;AACpDE,+BACI,gCACAF,gBADA,GAEA,uFAHJ;AAIH,aALD,MAKO;AACHL,qCAAqBS,IAArB,CAA0BJ,gBAA1B;AACAE,+BAAe,MAAM9B,SAAS4B,gBAAT,EAA2B,MAA3B,CAArB;AACA,oBAAIE,gBAAgB,IAApB,EAA0B;AACtBA,mCAAe,gCAAgCF,gBAAhC,GAAmD,oBAAlE;AACH,iBAFD,MAEO;AACHE,mCAAe,MAAM,KAAKV,oBAAL,CACjBQ,gBADiB,EAEjBE,YAFiB,EAGjBrB,KAHiB,EAIjBc,oBAJiB,CAArB;AAMH;AACJ;AACDD,kBAAMA,IAAIW,MAAJ,CAAW,CAAX,EAAcT,MAAMU,KAApB,IAA6BJ,YAA7B,GAA4CR,IAAIW,MAAJ,CAAWT,MAAMU,KAAN,GAAcV,MAAM,CAAN,EAASW,MAAlC,CAAlD;AACA1B,kBAAMU,SAAN,GAAkBK,MAAMU,KAAN,GAAcJ,aAAaK,MAA7C;AACH;AACD,eAAOb,GAAP;AACH;AAvDe;;AA0DpBc,OAAOC,OAAP,GAAiB;AACblC,mBAAeA;AADF,CAAjB","file":"IncludePlugin.js","sourcesContent":["import fs from \"fs\";\nimport { promisify } from \"util\";\n\nconst readFile = promisify(fs.readFile);\nlet path = require(\"path\");\nimport * as _ from \"lodash\";\n\nclass IncludePlugin {\n    constructor(config) {\n        this.name = \"IncludePlugin\";\n        this.defaults = _.defaultsDeep({}, config, {\n            regEx: /@include\\(([^\\)]+)\\)/g\n        });\n    }\n    getSettings(request) {\n        if (!request.include) {\n            request.include = {};\n        }\n        return request.include;\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    async runAsync(request, response) {\n        if (!request.input || !request.inputPath) {\n            return response;\n        }\n        const settings = this.getSettings(request);\n        settings.regEx.lastIndex = 0;\n        request.input = await this.replaceIncludesAsync(request.inputPath, request.input, settings.regEx, []);\n        return response;\n    }\n    async replaceIncludesAsync(currentFilePath, str, regEx, filesAlreadyIncluded) {\n        let match = null;\n        const directoryPath = path.dirname(currentFilePath);\n        regEx.lastIndex = 0;\n        while ((match = regEx.exec(str))) {\n            const absoluteFilePath = path.resolve(directoryPath, match[1]);\n            let strToInclude = \"\";\n            if (_.includes(filesAlreadyIncluded, absoluteFilePath)) {\n                strToInclude =\n                    \"<!-- Include failed: File '\" +\n                    absoluteFilePath +\n                    \"' already included. To avoid infinite loops, each file can only be included once. -->\";\n            } else {\n                filesAlreadyIncluded.push(absoluteFilePath);\n                strToInclude = await readFile(absoluteFilePath, \"utf8\");\n                if (strToInclude == null) {\n                    strToInclude = \"<!-- Include failed: File '\" + absoluteFilePath + \"' not found. -->\\n\";\n                } else {\n                    strToInclude = await this.replaceIncludesAsync(\n                        absoluteFilePath,\n                        strToInclude,\n                        regEx,\n                        filesAlreadyIncluded\n                    );\n                }\n            }\n            str = str.substr(0, match.index) + strToInclude + str.substr(match.index + match[0].length);\n            regEx.lastIndex = match.index + strToInclude.length;\n        }\n        return str;\n    }\n}\n\nmodule.exports = {\n    IncludePlugin: IncludePlugin\n};\n"]}