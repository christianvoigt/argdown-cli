{"version":3,"sources":["../../../src/plugins/CopyDefaultCssPlugin.js"],"names":["_","fs","require","path","mkdirp","CopyDefaultCssPlugin","config","previousSettings","settings","outputDir","defaultsDeep","name","data","logger","saveAs","$","rootPath","process","cwd","absoluteOutputDir","resolve","err","log","pathToDefaultCssFile","copySync","src","dest","existsSync","readFileSync","writeFileSync","module","exports"],"mappings":";;;;AAGA;;IAAYA,C;;;;;;AAHZ,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;;IAGMG,oB;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB;AACjBE,qBAAW;AADM,SAAnB;AAGD;AACD,WAAKD,QAAL,GAAgBR,EAAEU,YAAF,CAAe,EAAf,EAAmBJ,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,gCAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKK,IAAL,GAAY,sBAAZ;AACA,SAAKL,MAAL,GAAcA,MAAd;AACD;;;;wBACGM,I,EAAMC,M,EAAO;AACf,UAAGD,KAAKN,MAAL,IAAeM,KAAKN,MAAL,CAAYQ,MAA3B,IAAqCF,KAAKN,MAAL,CAAYQ,MAAZ,CAAmBL,SAA3D,EAAqE;AACnE,aAAKH,MAAL,GAAc;AACZG,qBAAWG,KAAKN,MAAL,CAAYQ,MAAZ,CAAmBL;AADlB,SAAd;AAGD;AACD,UAAMM,IAAI,IAAV;AACA,UAAIC,WAAWJ,KAAKN,MAAL,CAAYU,QAAZ,IAAwBC,QAAQC,GAAR,EAAvC;AACA,UAAIC,oBAAoBhB,KAAKiB,OAAL,CAAaJ,QAAb,EAAuBD,EAAEP,QAAF,CAAWC,SAAlC,CAAxB;AACAL,aAAOe,iBAAP,EAA0B,UAAUE,GAAV,EAAe;AACvC,YAAIA,GAAJ,EAAQ;AACNR,iBAAOS,GAAP,CAAW,OAAX,EAAoBD,GAApB;AACD;AACDR,eAAOS,GAAP,CAAW,SAAX,EAAsB,4CAA4CH,iBAAlE;AACA,YAAII,uBAAuBrB,QAAQkB,OAAR,CAAgB,4CAAhB,CAA3B;AACAL,UAAES,QAAF,CAAWD,oBAAX,EAAiCpB,KAAKiB,OAAL,CAAaD,iBAAb,EAA+B,aAA/B,CAAjC;AACD,OAPD;AAQD;;;6BACQM,G,EAAKC,I,EAAM;AAClB,UAAI,CAACzB,GAAG0B,UAAH,CAAcF,GAAd,CAAL,EAAyB;AACvB,eAAO,KAAP;AACD;;AAED,UAAIb,OAAOX,GAAG2B,YAAH,CAAgBH,GAAhB,EAAqB,OAArB,CAAX;AACAxB,SAAG4B,aAAH,CAAiBH,IAAjB,EAAuBd,IAAvB;AACD;;;;;;AAEHkB,OAAOC,OAAP,GAAiB;AACf1B,wBAAsBA;AADP,CAAjB","file":"CopyDefaultCssPlugin.js","sourcesContent":["let fs = require('fs');\nlet path = require('path');\nlet mkdirp = require('mkdirp');\nimport * as _ from 'lodash';\n\nclass CopyDefaultCssPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        outputDir: \"./html\"\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  constructor(config){\n    this.name = \"CopyDefaultCssPlugin\";\n    this.config = config;\n  }\n  run(data, logger){\n    if(data.config && data.config.saveAs && data.config.saveAs.outputDir){\n      this.config = {\n        outputDir: data.config.saveAs.outputDir\n      }\n    }\n    const $ = this;\n    let rootPath = data.config.rootPath || process.cwd();\n    let absoluteOutputDir = path.resolve(rootPath, $.settings.outputDir);\n    mkdirp(absoluteOutputDir, function (err) {\n      if (err){\n        logger.log(\"error\", err);\n      }\n      logger.log(\"verbose\", \"Copying default argdown.css to folder: \" + absoluteOutputDir);        \n      let pathToDefaultCssFile = require.resolve('argdown-parser/lib/src/plugins/argdown.css');\n      $.copySync(pathToDefaultCssFile, path.resolve(absoluteOutputDir,\"argdown.css\"));\n    });    \n  }\n  copySync(src, dest) {\n    if (!fs.existsSync(src)) {\n      return false;\n    }\n\n    var data = fs.readFileSync(src, 'utf-8');\n    fs.writeFileSync(dest, data);\n  }\n}\nmodule.exports = {\n  CopyDefaultCssPlugin: CopyDefaultCssPlugin\n}\n"]}