{"version":3,"sources":["../../../src/plugins/CopyDefaultCssPlugin.js"],"names":["_","fs","require","path","mkdirp","CopyDefaultCssPlugin","config","previousSettings","settings","outputDir","defaultsDeep","name","data","saveAs","$","absoluteOutputDir","resolve","process","cwd","err","console","log","verbose","pathToDefaultCssFile","__dirname","copySync","src","dest","existsSync","readFileSync","writeFileSync","module","exports"],"mappings":";;;;AAGA;;IAAYA,C;;;;;;AAHZ,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;;IAGMG,oB;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB;AACjBE,qBAAW;AADM,SAAnB;AAGD;AACD,WAAKD,QAAL,GAAgBR,EAAEU,YAAF,CAAe,EAAf,EAAmBJ,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,gCAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKK,IAAL,GAAY,sBAAZ;AACA,SAAKL,MAAL,GAAcA,MAAd;AACD;;;;wBACGM,I,EAAK;AACP,UAAGA,KAAKN,MAAL,IAAeM,KAAKN,MAAL,CAAYO,MAA3B,IAAqCD,KAAKN,MAAL,CAAYO,MAAZ,CAAmBJ,SAA3D,EAAqE;AACnE,aAAKH,MAAL,GAAc;AACZG,qBAAWG,KAAKN,MAAL,CAAYO,MAAZ,CAAmBJ;AADlB,SAAd;AAGD;AACD,UAAMK,IAAI,IAAV;AACA,UAAIC,oBAAoBZ,KAAKa,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BJ,EAAEN,QAAF,CAAWC,SAAvC,CAAxB;AACAL,aAAOW,iBAAP,EAA0B,UAAUI,GAAV,EAAe;AACvC,YAAIA,GAAJ,EAAQ;AACNC,kBAAQC,GAAR,CAAYF,GAAZ;AACD;AACD,YAAGP,QAAQA,KAAKN,MAAb,IAAuBM,KAAKN,MAAL,CAAYgB,OAAtC,EAA8C;AAC5CF,kBAAQC,GAAR,CAAY,4CAA4CN,iBAAxD;AACD;AACD,YAAIQ,uBAAuBpB,KAAKa,OAAL,CAAaQ,SAAb,EAAwB,kEAAxB,CAA3B;AACAV,UAAEW,QAAF,CAAWF,oBAAX,EAAiCpB,KAAKa,OAAL,CAAaD,iBAAb,EAA+B,aAA/B,CAAjC;AACD,OATD;AAUD;;;6BACQW,G,EAAKC,I,EAAM;AAClB,UAAI,CAAC1B,GAAG2B,UAAH,CAAcF,GAAd,CAAL,EAAyB;AACvB,eAAO,KAAP;AACD;;AAED,UAAId,OAAOX,GAAG4B,YAAH,CAAgBH,GAAhB,EAAqB,OAArB,CAAX;AACAzB,SAAG6B,aAAH,CAAiBH,IAAjB,EAAuBf,IAAvB;AACD;;;;;;AAEHmB,OAAOC,OAAP,GAAiB;AACf3B,wBAAsBA;AADP,CAAjB","file":"CopyDefaultCssPlugin.js","sourcesContent":["let fs = require('fs');\nlet path = require('path');\nlet mkdirp = require('mkdirp');\nimport * as _ from 'lodash';\n\nclass CopyDefaultCssPlugin{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        outputDir: \"./html\"\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  constructor(config){\n    this.name = \"CopyDefaultCssPlugin\";\n    this.config = config;\n  }\n  run(data){\n    if(data.config && data.config.saveAs && data.config.saveAs.outputDir){\n      this.config = {\n        outputDir: data.config.saveAs.outputDir\n      }\n    }\n    const $ = this;\n    let absoluteOutputDir = path.resolve(process.cwd(), $.settings.outputDir);\n    mkdirp(absoluteOutputDir, function (err) {\n      if (err){\n        console.log(err);\n      }\n      if(data && data.config && data.config.verbose){\n        console.log(\"Copying default argdown.css to folder: \" + absoluteOutputDir);        \n      }\n      let pathToDefaultCssFile = path.resolve(__dirname, '../../../node_modules/argdown-parser/lib/src/plugins/argdown.css');\n      $.copySync(pathToDefaultCssFile, path.resolve(absoluteOutputDir,\"argdown.css\"));\n    });    \n  }\n  copySync(src, dest) {\n    if (!fs.existsSync(src)) {\n      return false;\n    }\n\n    var data = fs.readFileSync(src, 'utf-8');\n    fs.writeFileSync(dest, data);\n  }\n}\nmodule.exports = {\n  CopyDefaultCssPlugin: CopyDefaultCssPlugin\n}\n"]}