{"version":3,"sources":["../../../src/plugins/CopyDefaultCssPlugin.js"],"names":["_","fs","require","path","mkdirp","CopyDefaultCssPlugin","config","previousSettings","settings","outputDir","defaultsDeep","constructor","name","runAsync","request","response","logger","html","saveAs","$","rootPath","process","cwd","absoluteOutputDir","resolve","Promise","reject","err","pathToDefaultCssFile","log","COPYFILE_EXCL","constants","copyFile","module","exports"],"mappings":";;AAGA;;IAAYA,C;;;;AAHZ,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;;;AAGA,MAAMG,oBAAN,CAA2B;AACzB,MAAIC,MAAJ,CAAWA,MAAX,EAAmB;AACjB,QAAIC,mBAAmB,KAAKC,QAA5B;AACA,QAAI,CAACD,gBAAL,EAAuB;AACrBA,yBAAmB;AACjBE,mBAAW;AADM,OAAnB;AAGD;AACD,SAAKD,QAAL,GAAgBR,EAAEU,YAAF,CAAe,EAAf,EAAmBJ,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;AACDI,cAAYL,MAAZ,EAAoB;AAClB,SAAKM,IAAL,GAAY,sBAAZ;AACA,SAAKN,MAAL,GAAcA,MAAd;AACD;AACD,QAAMO,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;AACxC,QAAIF,QAAQG,IAAR,IAAgBH,QAAQG,IAAR,CAAaR,SAAjC,EAA4C;AAC1C,WAAKH,MAAL,GAAc;AACZG,mBAAWK,QAAQG,IAAR,CAAaR;AADZ,OAAd;AAGD,KAJD,MAIO,IAAIK,QAAQI,MAAR,IAAkBJ,QAAQI,MAAR,CAAeT,SAArC,EAAgD;AACrD,WAAKH,MAAL,GAAc;AACZG,mBAAWK,QAAQI,MAAR,CAAeT;AADd,OAAd;AAGD;AACD,UAAMU,IAAI,IAAV;AACA,QAAIC,WAAWN,QAAQM,QAAR,IAAoBC,QAAQC,GAAR,EAAnC;AACA,QAAIC,oBAAoBpB,KAAKqB,OAAL,CAAaJ,QAAb,EAAuBD,EAAEX,QAAF,CAAWC,SAAlC,CAAxB;AACA,UAAM,IAAIgB,OAAJ,CAAY,CAACD,OAAD,EAAUE,MAAV,KAAqB;AACrCtB,aAAOmB,iBAAP,EAA0B,UAASI,GAAT,EAAc;AACtC,YAAIA,GAAJ,EAAS;AACPD,iBAAOC,GAAP;AACD;AACDH;AACD,OALD;AAMD,KAPK,CAAN;AAQA,QAAII,uBAAuB1B,QAAQsB,OAAR,CACzB,4CADyB,CAA3B;AAGAR,WAAOa,GAAP,CACE,SADF,EAEE,4CAA4CN,iBAF9C;AAIA,UAAM,EAAEO,aAAF,KAAoB7B,GAAG8B,SAA7B;AACA,UAAM,IAAIN,OAAJ,CAAY,CAACD,OAAD,EAAUE,MAAV,KAAqB;AACrCzB,SAAG+B,QAAH,CACEJ,oBADF,EAEEzB,KAAKqB,OAAL,CAAaD,iBAAb,EAAgC,aAAhC,CAFF,EAGEO,aAHF,EAIEH,OAAO;AACL,YAAIA,GAAJ,EAAS;AACPD,iBAAOC,GAAP;AACD;AACDH;AACD,OATH;AAWD,KAZK,CAAN;AAaD;AAxDwB;AA0D3BS,OAAOC,OAAP,GAAiB;AACf7B,wBAAsBA;AADP,CAAjB","file":"CopyDefaultCssPlugin.js","sourcesContent":["let fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport * as _ from \"lodash\";\n\nclass CopyDefaultCssPlugin {\n  set config(config) {\n    let previousSettings = this.settings;\n    if (!previousSettings) {\n      previousSettings = {\n        outputDir: \"./html\"\n      };\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  constructor(config) {\n    this.name = \"CopyDefaultCssPlugin\";\n    this.config = config;\n  }\n  async runAsync(request, response, logger) {\n    if (request.html && request.html.outputDir) {\n      this.config = {\n        outputDir: request.html.outputDir\n      };\n    } else if (request.saveAs && request.saveAs.outputDir) {\n      this.config = {\n        outputDir: request.saveAs.outputDir\n      };\n    }\n    const $ = this;\n    let rootPath = request.rootPath || process.cwd();\n    let absoluteOutputDir = path.resolve(rootPath, $.settings.outputDir);\n    await new Promise((resolve, reject) => {\n      mkdirp(absoluteOutputDir, function(err) {\n        if (err) {\n          reject(err);\n        }\n        resolve();\n      });\n    });\n    let pathToDefaultCssFile = require.resolve(\n      \"argdown-parser/lib/src/plugins/argdown.css\"\n    );\n    logger.log(\n      \"verbose\",\n      \"Copying default argdown.css to folder: \" + absoluteOutputDir\n    );\n    const { COPYFILE_EXCL } = fs.constants;\n    await new Promise((resolve, reject) => {\n      fs.copyFile(\n        pathToDefaultCssFile,\n        path.resolve(absoluteOutputDir, \"argdown.css\"),\n        COPYFILE_EXCL,\n        err => {\n          if (err) {\n            reject(err);\n          }\n          resolve();\n        }\n      );\n    });\n  }\n}\nmodule.exports = {\n  CopyDefaultCssPlugin: CopyDefaultCssPlugin\n};\n"]}