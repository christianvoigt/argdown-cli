{"version":3,"sources":["../../../src/plugins/SvgToPdfExportPlugin.js"],"names":["_","PDFDocument","require","fs","path","mkdirp","SvgToPdfExportPlugin","constructor","config","name","defaults","defaultsDeep","outputDir","format","getSettings","request","svgToPdf","prepare","runAsync","response","svg","settings","fileName","isFunction","call","isString","inputPath","getFileName","absoluteOutputDir","resolve","process","cwd","filePath","Promise","reject","err","doc","savePdfToFile","pdf","pendingStepCount","stepFinished","writeStream","createWriteStream","on","pipe","end","file","extension","extname","basename","module","exports"],"mappings":"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","file":"SvgToPdfExportPlugin.js","sourcesContent":["// We have to use a local file and let babel ignore it, until pdfkit is ported to ES6\nvar PDFDocument = require(\"../pdfkit.js\");\nvar fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport SVGtoPDF from \"svg-to-pdfkit\";\nimport * as _ from \"lodash\";\n\nclass SvgToPdfExportPlugin {\n    constructor(config) {\n        this.name = \"SvgToPdfExportPlugin\";\n        this.defaults = _.defaultsDeep({}, config, {\n            outputDir: \"./pdf\",\n            format: \"svg\"\n        });\n    }\n    getSettings(request) {\n        if (request.svgToPdf) {\n            return request.svgToPdf;\n        } else if (request.SvgToPdfExportPlugin) {\n            return request.SvgToPdfExportPlugin;\n        } else {\n            request.svgToPdf = {};\n            return request.svgToPdf;\n        }\n    }\n    prepare(request){\n        _.defaults(this.getSettings(request), this.defaults);\n    }\n    async runAsync(request, response) {\n        if (!response.svg) {\n            return response;\n        }\n        const settings = this.getSettings(request);\n        let fileName = \"default\";\n        if (_.isFunction(settings.fileName)) {\n            fileName = settings.fileName.call(this, request, response);\n        } else if (_.isString(settings.fileName)) {\n            fileName = settings.fileName;\n        } else if (request.inputPath) {\n            fileName = this.getFileName(request.inputPath);\n        }\n        const absoluteOutputDir = path.resolve(process.cwd(), settings.outputDir);\n        const filePath = absoluteOutputDir + \"/\" + fileName + \".pdf\";\n        await new Promise((resolve, reject) => {\n            mkdirp(absoluteOutputDir, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        var doc = new PDFDocument(settings);\n        SVGtoPDF(doc, response.svg, 0, 0, settings);\n        await this.savePdfToFile(doc, filePath);\n        return response;\n    }\n    // https://github.com/devongovett/pdfkit/issues/265\n    async savePdfToFile(pdf, fileName) {\n        return new Promise(resolve => {\n            // To determine when the PDF has finished being written successfully\n            // we need to confirm the following 2 conditions:\n            //\n            //   1. The write stream has been closed\n            //   2. PDFDocument.end() was called syncronously without an error being thrown\n\n            let pendingStepCount = 2;\n\n            const stepFinished = () => {\n                if (--pendingStepCount == 0) {\n                    resolve();\n                }\n            };\n\n            const writeStream = fs.createWriteStream(fileName);\n            writeStream.on(\"close\", stepFinished);\n            pdf.pipe(writeStream);\n\n            pdf.end();\n\n            stepFinished();\n        });\n    }\n    getFileName(file) {\n        let extension = path.extname(file);\n        return path.basename(file, extension);\n    }\n}\nmodule.exports = {\n    SvgToPdfExportPlugin: SvgToPdfExportPlugin\n};\n"]}