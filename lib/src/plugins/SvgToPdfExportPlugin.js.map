{"version":3,"sources":["../../../src/plugins/SvgToPdfExportPlugin.js"],"names":["_","PDFDocument","require","fs","path","mkdirp","SvgToPdfExportPlugin","constructor","config","name","defaults","defaultsDeep","outputDir","format","getSettings","request","svgToPdf","prepare","runAsync","response","svg","settings","fileName","outputPath","getFileName","dirname","pdf","isFunction","call","isString","inputPath","absoluteOutputDir","resolve","process","cwd","filePath","Promise","reject","err","doc","savePdfToFile","pendingStepCount","stepFinished","writeStream","createWriteStream","on","pipe","end","file","extension","extname","basename"],"mappings":"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","file":"SvgToPdfExportPlugin.js","sourcesContent":["// We have to use a local file and let babel ignore it, until pdfkit is ported to ES6\nvar PDFDocument = require(\"../pdfkit.js\");\nvar fs = require(\"fs\");\nlet path = require(\"path\");\nlet mkdirp = require(\"mkdirp\");\nimport SVGtoPDF from \"svg-to-pdfkit\";\nimport * as _ from \"lodash\";\n\nexport class SvgToPdfExportPlugin {\n  constructor(config) {\n    this.name = \"SvgToPdfExportPlugin\";\n    this.defaults = _.defaultsDeep({}, config, {\n      outputDir: \"./pdf\",\n      format: \"svg\"\n    });\n  }\n  getSettings(request) {\n    if (request.svgToPdf) {\n      return request.svgToPdf;\n    } else if (request.SvgToPdfExportPlugin) {\n      return request.SvgToPdfExportPlugin;\n    } else {\n      request.svgToPdf = {};\n      return request.svgToPdf;\n    }\n  }\n  prepare(request) {\n    _.defaults(this.getSettings(request), this.defaults);\n  }\n  async runAsync(request, response) {\n    if (!response.svg) {\n      return response;\n    }\n    const settings = this.getSettings(request);\n    let fileName = \"default\";\n    let outputDir = settings.outputDir;\n    if (request.outputPath) {\n      fileName = this.getFileName(request.outputPath);\n      outputDir = path.dirname(request.outputPath);\n    } else if (request.pdf && request.pdf.outputPath) {\n      fileName = this.getFileName(request.pdf.outputPath);\n      outputDir = path.dirname(request.pdf.outputPath);\n    } else if (_.isFunction(settings.fileName)) {\n      fileName = settings.fileName.call(this, request, response);\n    } else if (_.isString(settings.fileName)) {\n      fileName = settings.fileName;\n    } else if (request.inputPath) {\n      fileName = this.getFileName(request.inputPath);\n    }\n    const absoluteOutputDir = path.resolve(process.cwd(), outputDir);\n    const filePath = absoluteOutputDir + \"/\" + fileName + \".pdf\";\n    await new Promise((resolve, reject) => {\n      mkdirp(absoluteOutputDir, function(err) {\n        if (err) {\n          reject(err);\n        }\n        resolve();\n      });\n    });\n    var doc = new PDFDocument(settings);\n    SVGtoPDF(doc, response.svg, 0, 0, settings);\n    await this.savePdfToFile(doc, filePath);\n    return response;\n  }\n  // https://github.com/devongovett/pdfkit/issues/265\n  async savePdfToFile(pdf, fileName) {\n    return new Promise(resolve => {\n      // To determine when the PDF has finished being written successfully\n      // we need to confirm the following 2 conditions:\n      //\n      //   1. The write stream has been closed\n      //   2. PDFDocument.end() was called syncronously without an error being thrown\n\n      let pendingStepCount = 2;\n\n      const stepFinished = () => {\n        if (--pendingStepCount == 0) {\n          resolve();\n        }\n      };\n\n      const writeStream = fs.createWriteStream(fileName);\n      writeStream.on(\"close\", stepFinished);\n      pdf.pipe(writeStream);\n\n      pdf.end();\n\n      stepFinished();\n    });\n  }\n  getFileName(file) {\n    let extension = path.extname(file);\n    return path.basename(file, extension);\n  }\n}\n"]}