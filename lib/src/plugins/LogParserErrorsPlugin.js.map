{"version":3,"sources":["../../../src/plugins/LogParserErrorsPlugin.js"],"names":["LogParserErrorsPlugin","constructor","name","run","request","response","logger","parserErrors","length","inputFile","nrOfErrors","log","error","message","startLine","startColumn","token","tokenType","EOF","previousToken","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,qBAAN,CAA4B;AACxBC,kBAAc;AACV,aAAKC,IAAL,GAAY,uBAAZ;AACA;AACH;AACDC,QAAIC,OAAJ,EAAaC,QAAb,EAAuBC,MAAvB,EAA+B;AAC3B,YAAID,SAASE,YAAT,IAAyBF,SAASE,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAC3D,kBAAMC,YAAYL,QAAQK,SAA1B;AACA,kBAAMC,aAAaL,SAASE,YAAT,CAAsBC,MAAzC;AACA,gBAAIC,SAAJ,EAAe;AACXH,uBAAOK,GAAP,CACI,OADJ,EAEK,+CAA8CF,SAAU,KAAIC,UAAW,aAF5E;AAIH,aALD,MAKO;AACHJ,uBAAOK,GAAP,CAAW,OAAX,EAAqB,sDAAqDD,UAAW,aAArF;AACH;AACD,iBAAK,IAAIE,KAAT,IAAkBP,SAASE,YAA3B,EAAyC;AACrC,sBAAMM,UAAUD,MAAMC,OAAtB;AACA,oBAAIC,SAAJ,EAAeC,WAAf;AACA,oBAAIH,MAAMI,KAAN,CAAYC,SAAZ,KAA0B,4BAAaC,GAA3C,EAAgD;AAC5C;AACA;AACA,wBAAIN,MAAMO,aAAV,EAAyB;AACrBL,oCAAYF,MAAMO,aAAN,CAAoBL,SAAhC;AACAC,sCAAcH,MAAMO,aAAN,CAAoBJ,WAAlC;AACH;AACJ,iBAPD,MAOO;AACHD,gCAAYF,MAAMI,KAAN,CAAYF,SAAxB;AACAC,kCAAcH,MAAMI,KAAN,CAAYD,WAA1B;AACH;AACDT,uBAAOK,GAAP,CAAW,OAAX,EAAqB,gBAAeG,SAAU,IAAGC,WAAY,cAAaF,OAAQ,IAAlF;AACH;AACJ;AACD,eAAOR,QAAP;AACH;AAnCuB;AAqC5Be,OAAOC,OAAP,GAAiB;AACbrB,2BAAuBA;AADV,CAAjB","file":"LogParserErrorsPlugin.js","sourcesContent":["import { ArgdownLexer } from \"argdown-parser\";\n\nclass LogParserErrorsPlugin {\n    constructor() {\n        this.name = \"LogParserErrorsPlugin\";\n        //this.defaults = _.defaultsDeep({}, config, {});\n    }\n    run(request, response, logger) {\n        if (response.parserErrors && response.parserErrors.length > 0) {\n            const inputFile = request.inputFile;\n            const nrOfErrors = response.parserErrors.length;\n            if (inputFile) {\n                logger.log(\n                    \"error\",\n                    `\\u001b[31m\\u001b[1mArgdown syntax errors in ${inputFile}: ${nrOfErrors}\\u001b[0m\\n`\n                );\n            } else {\n                logger.log(\"error\", `\\u001b[31m\\u001b[1mArgdown syntax errors in input: ${nrOfErrors}\\u001b[0m\\n`);\n            }\n            for (let error of response.parserErrors) {\n                const message = error.message;\n                var startLine, startColumn;\n                if (error.token.tokenType === ArgdownLexer.EOF) {\n                    // This is an EarlyExitError. EOF does not have a token location, but EarlyExitErrors save the previousToken parsed\n                    //console.log(error);\n                    if (error.previousToken) {\n                        startLine = error.previousToken.startLine;\n                        startColumn = error.previousToken.startColumn;\n                    }\n                } else {\n                    startLine = error.token.startLine;\n                    startColumn = error.token.startColumn;\n                }\n                logger.log(\"error\", `\\u001b[31mAt ${startLine}:${startColumn}\\u001b[0m\\n${message}\\n`);\n            }\n        }\n        return response;\n    }\n}\nmodule.exports = {\n    LogParserErrorsPlugin: LogParserErrorsPlugin\n};\n"]}