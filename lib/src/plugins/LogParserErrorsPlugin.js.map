{"version":3,"sources":["../../../src/plugins/LogParserErrorsPlugin.js"],"names":["_","LogParserErrorsPlugin","config","previousSettings","settings","defaultsDeep","name","data","logger","parserErrors","length","inputFile","nrOfErrors","log","error","message","startLine","startColumn","token","tokenType","EOF","previousToken","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;AACZ;;;;;;IAEMC,qB;;;0BACSC,M,EAAQ;AACf,gBAAIC,mBAAmB,KAAKC,QAA5B;AACA,gBAAI,CAACD,gBAAL,EAAuB;AACnBA,mCAAmB,EAAnB;AAEH;AACD,iBAAKC,QAAL,GAAgBJ,EAAEK,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACH;;;AACD,mCAAYD,MAAZ,EAAoB;AAAA;;AAChB,aAAKI,IAAL,GAAY,uBAAZ;AACA,aAAKJ,MAAL,GAAcA,MAAd;AACH;;;;4BACGK,I,EAAMC,M,EAAQ;AACd,gBAAID,KAAKE,YAAL,IAAqBF,KAAKE,YAAL,CAAkBC,MAAlB,GAA2B,CAApD,EAAuD;AACnD,oBAAMC,YAAYJ,KAAKI,SAAvB;AACA,oBAAMC,aAAaL,KAAKE,YAAL,CAAkBC,MAArC;AACA,oBAAGC,SAAH,EAAa;AACTH,2BAAOK,GAAP,CAAW,OAAX,+CAAmEF,SAAnE,UAAiFC,UAAjF;AACH,iBAFD,MAEK;AACDJ,2BAAOK,GAAP,CAAW,OAAX,sDAA0ED,UAA1E;AACH;AAPkD;AAAA;AAAA;;AAAA;AAQnD,yCAAkBL,KAAKE,YAAvB,8HAAqC;AAAA,4BAA5BK,KAA4B;;AACjC,4BAAMC,UAAUD,MAAMC,OAAtB;AACA,4BAAIC,SAAJ,EAAeC,WAAf;AACA,4BAAGH,MAAMI,KAAN,CAAYC,SAAZ,KAA0B,4BAAaC,GAA1C,EAA8C;AAAE;AAC5C;AACA,gCAAGN,MAAMO,aAAT,EAAuB;AACnBL,4CAAYF,MAAMO,aAAN,CAAoBL,SAAhC;AACAC,8CAAcH,MAAMO,aAAN,CAAoBJ,WAAlC;AACH;AACJ,yBAND,MAMK;AACDD,wCAAYF,MAAMI,KAAN,CAAYF,SAAxB;AACAC,0CAAcH,MAAMI,KAAN,CAAYD,WAA1B;AACH;AACDT,+BAAOK,GAAP,CAAW,OAAX,kBAAoCG,SAApC,SAAiDC,WAAjD,iBAA0EF,OAA1E;AACH;AAtBkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBtD;AACD,mBAAOR,IAAP;AACH;;;;;;AAELe,OAAOC,OAAP,GAAiB;AACbtB,2BAAuBA;AADV,CAAjB","file":"LogParserErrorsPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {ArgdownLexer} from 'argdown-parser';\n\nclass LogParserErrorsPlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n            }\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n    }\n    constructor(config) {\n        this.name = \"LogParserErrorsPlugin\";\n        this.config = config;\n    }\n    run(data, logger) {\n        if (data.parserErrors && data.parserErrors.length > 0) {\n            const inputFile = data.inputFile;\n            const nrOfErrors = data.parserErrors.length;\n            if(inputFile){\n                logger.log(\"error\", `\\u001b[31m\\u001b[1mArgdown syntax errors in ${inputFile}: ${nrOfErrors}\\u001b[0m\\n`);\n            }else{\n                logger.log(\"error\", `\\u001b[31m\\u001b[1mArgdown syntax errors in input: ${nrOfErrors}\\u001b[0m\\n`);\n            }\n            for (let error of data.parserErrors) {\n                const message = error.message;\n                var startLine, startColumn;\n                if(error.token.tokenType === ArgdownLexer.EOF){ // This is an EarlyExitError. EOF does not have a token location, but EarlyExitErrors save the previousToken parsed\n                    //console.log(error);\n                    if(error.previousToken){\n                        startLine = error.previousToken.startLine;\n                        startColumn = error.previousToken.startColumn;\n                    }\n                }else{\n                    startLine = error.token.startLine;\n                    startColumn = error.token.startColumn;\n                }\n                logger.log(\"error\", `\\u001b[31mAt ${startLine}:${startColumn}\\u001b[0m\\n${message}\\n`);\n            }\n        }\n        return data;\n    }\n}\nmodule.exports = {\n    LogParserErrorsPlugin: LogParserErrorsPlugin\n}\n"]}