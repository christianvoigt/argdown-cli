{"version":3,"sources":["../../../src/plugins/LogParserErrorsPlugin.js"],"names":["_","LogParserErrorsPlugin","config","previousSettings","settings","defaultsDeep","constructor","name","run","request","response","logger","parserErrors","length","inputFile","nrOfErrors","log","error","message","startLine","startColumn","token","tokenType","EOF","previousToken","module","exports"],"mappings":";;AAAA;;IAAYA,C;;AACZ;;;;AAEA,MAAMC,qBAAN,CAA4B;AACxB,QAAIC,MAAJ,CAAWA,MAAX,EAAmB;AACf,YAAIC,mBAAmB,KAAKC,QAA5B;AACA,YAAI,CAACD,gBAAL,EAAuB;AACnBA,+BAAmB,EAAnB;AAEH;AACD,aAAKC,QAAL,GAAgBJ,EAAEK,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACH;AACDG,gBAAYJ,MAAZ,EAAoB;AAChB,aAAKK,IAAL,GAAY,uBAAZ;AACA,aAAKL,MAAL,GAAcA,MAAd;AACH;AACDM,QAAIC,OAAJ,EAAaC,QAAb,EAAuBC,MAAvB,EAA+B;AAC3B,YAAID,SAASE,YAAT,IAAyBF,SAASE,YAAT,CAAsBC,MAAtB,GAA+B,CAA5D,EAA+D;AAC3D,kBAAMC,YAAYL,QAAQK,SAA1B;AACA,kBAAMC,aAAaL,SAASE,YAAT,CAAsBC,MAAzC;AACA,gBAAGC,SAAH,EAAa;AACTH,uBAAOK,GAAP,CAAW,OAAX,EAAqB,+CAA8CF,SAAU,KAAIC,UAAW,aAA5F;AACH,aAFD,MAEK;AACDJ,uBAAOK,GAAP,CAAW,OAAX,EAAqB,sDAAqDD,UAAW,aAArF;AACH;AACD,iBAAK,IAAIE,KAAT,IAAkBP,SAASE,YAA3B,EAAyC;AACrC,sBAAMM,UAAUD,MAAMC,OAAtB;AACA,oBAAIC,SAAJ,EAAeC,WAAf;AACA,oBAAGH,MAAMI,KAAN,CAAYC,SAAZ,KAA0B,4BAAaC,GAA1C,EAA8C;AAAE;AAC5C;AACA,wBAAGN,MAAMO,aAAT,EAAuB;AACnBL,oCAAYF,MAAMO,aAAN,CAAoBL,SAAhC;AACAC,sCAAcH,MAAMO,aAAN,CAAoBJ,WAAlC;AACH;AACJ,iBAND,MAMK;AACDD,gCAAYF,MAAMI,KAAN,CAAYF,SAAxB;AACAC,kCAAcH,MAAMI,KAAN,CAAYD,WAA1B;AACH;AACDT,uBAAOK,GAAP,CAAW,OAAX,EAAqB,gBAAeG,SAAU,IAAGC,WAAY,cAAaF,OAAQ,IAAlF;AACH;AACJ;AACD,eAAOR,QAAP;AACH;AAvCuB;AAyC5Be,OAAOC,OAAP,GAAiB;AACbzB,2BAAuBA;AADV,CAAjB","file":"LogParserErrorsPlugin.js","sourcesContent":["import * as _ from 'lodash';\nimport {ArgdownLexer} from 'argdown-parser';\n\nclass LogParserErrorsPlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n            }\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n    }\n    constructor(config) {\n        this.name = \"LogParserErrorsPlugin\";\n        this.config = config;\n    }\n    run(request, response, logger) {\n        if (response.parserErrors && response.parserErrors.length > 0) {\n            const inputFile = request.inputFile;\n            const nrOfErrors = response.parserErrors.length;\n            if(inputFile){\n                logger.log(\"error\", `\\u001b[31m\\u001b[1mArgdown syntax errors in ${inputFile}: ${nrOfErrors}\\u001b[0m\\n`);\n            }else{\n                logger.log(\"error\", `\\u001b[31m\\u001b[1mArgdown syntax errors in input: ${nrOfErrors}\\u001b[0m\\n`);\n            }\n            for (let error of response.parserErrors) {\n                const message = error.message;\n                var startLine, startColumn;\n                if(error.token.tokenType === ArgdownLexer.EOF){ // This is an EarlyExitError. EOF does not have a token location, but EarlyExitErrors save the previousToken parsed\n                    //console.log(error);\n                    if(error.previousToken){\n                        startLine = error.previousToken.startLine;\n                        startColumn = error.previousToken.startColumn;\n                    }\n                }else{\n                    startLine = error.token.startLine;\n                    startColumn = error.token.startColumn;\n                }\n                logger.log(\"error\", `\\u001b[31mAt ${startLine}:${startColumn}\\u001b[0m\\n${message}\\n`);\n            }\n        }\n        return response;\n    }\n}\nmodule.exports = {\n    LogParserErrorsPlugin: LogParserErrorsPlugin\n}\n"]}