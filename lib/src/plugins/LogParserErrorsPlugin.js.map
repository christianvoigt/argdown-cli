{"version":3,"sources":["../../../src/plugins/LogParserErrorsPlugin.js"],"names":["_","LogParserErrorsPlugin","config","previousSettings","settings","defaultsDeep","name","data","parserErrors","length","inputFile","nrOfErrors","console","log","error","startLine","token","startColumn","message","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;;;;;IAENC,qB;;;0BACSC,M,EAAQ;AACf,gBAAIC,mBAAmB,KAAKC,QAA5B;AACA,gBAAI,CAACD,gBAAL,EAAuB;AACnBA,mCAAmB,EAAnB;AAEH;AACD,iBAAKC,QAAL,GAAgBJ,EAAEK,YAAF,CAAe,EAAf,EAAmBH,MAAnB,EAA2BC,gBAA3B,CAAhB;AACH;;;AACD,mCAAYD,MAAZ,EAAoB;AAAA;;AAChB,aAAKI,IAAL,GAAY,uBAAZ;AACA,aAAKJ,MAAL,GAAcA,MAAd;AACH;;;;4BACGK,I,EAAM;AACN,gBAAIA,KAAKC,YAAL,IAAqBD,KAAKC,YAAL,CAAkBC,MAAlB,GAA2B,CAApD,EAAuD;AACnD,oBAAMC,YAAYH,KAAKG,SAAvB;AACA,oBAAMC,aAAaJ,KAAKC,YAAL,CAAkBC,MAArC;AACA,oBAAGC,SAAH,EAAa;AACTE,4BAAQC,GAAR,8CAA2DH,SAA3D,UAAyEC,UAAzE;AACH,iBAFD,MAEK;AACDC,4BAAQC,GAAR,qDAAkEF,UAAlE;AACH;AAPkD;AAAA;AAAA;;AAAA;AAQnD,yCAAkBJ,KAAKC,YAAvB,8HAAqC;AAAA,4BAA5BM,KAA4B;;AACjC,4BAAMC,YAAYD,MAAME,KAAN,CAAYD,SAA9B;AACA,4BAAME,cAAcH,MAAME,KAAN,CAAYC,WAAhC;AACA,4BAAMC,UAAUJ,MAAMI,OAAtB;AACAN,gCAAQC,GAAR,iBAA4BE,SAA5B,SAAyCE,WAAzC,iBAAkEC,OAAlE;AACH;AAbkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AActD;AACD,mBAAOX,IAAP;AACH;;;;;;AAELY,OAAOC,OAAP,GAAiB;AACbnB,2BAAuBA;AADV,CAAjB","file":"LogParserErrorsPlugin.js","sourcesContent":["import * as _ from 'lodash';\n\nclass LogParserErrorsPlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n            }\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n    }\n    constructor(config) {\n        this.name = \"LogParserErrorsPlugin\";\n        this.config = config;\n    }\n    run(data) {\n        if (data.parserErrors && data.parserErrors.length > 0) {\n            const inputFile = data.inputFile;\n            const nrOfErrors = data.parserErrors.length;\n            if(inputFile){\n                console.log(`\\u001b[31m\\u001b[1mArgdown syntax errors in ${inputFile}: ${nrOfErrors}\\u001b[0m\\n`);\n            }else{\n                console.log(`\\u001b[31m\\u001b[1mArgdown syntax errors in input: ${nrOfErrors}\\u001b[0m\\n`);\n            }\n            for (let error of data.parserErrors) {\n                const startLine = error.token.startLine;\n                const startColumn = error.token.startColumn;\n                const message = error.message;\n                console.log(`\\u001b[31mAt ${startLine}:${startColumn}\\u001b[0m\\n${message}\\n`);\n            }\n        }\n        return data;\n    }\n}\nmodule.exports = {\n    LogParserErrorsPlugin: LogParserErrorsPlugin\n}\n"]}