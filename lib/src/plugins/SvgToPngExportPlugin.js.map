{"version":3,"sources":["../../../src/plugins/SvgToPngExportPlugin.js"],"names":["_","path","require","sharp","mkdirp","SvgToPngExportPlugin","config","previousSettings","settings","outputDir","density","defaultsDeep","format","constructor","name","runAsync","request","response","logger","svgToPng","svg","fileName","isFunction","call","isString","inputPath","getFileName","absoluteOutputDir","resolve","process","cwd","filePath","convertedSvg","replaceAll","Promise","reject","err","width","height","Buffer","resize","max","png","toFile","file","extension","extname","basename","str","find","replace","RegExp","module","exports"],"mappings":"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","file":"SvgToPngExportPlugin.js","sourcesContent":["let path = require(\"path\");\nimport * as _ from \"lodash\";\nconst sharp = require(\"sharp\");\nlet mkdirp = require(\"mkdirp\");\n\nclass SvgToPngExportPlugin {\n    set config(config) {\n        let previousSettings = this.settings;\n        if (!previousSettings) {\n            previousSettings = {\n                outputDir: \"./png\",\n                density: 300\n            };\n        }\n        this.settings = _.defaultsDeep({}, config, previousSettings);\n        // enforce svg export\n        this.settings.format = \"png\";\n    }\n    constructor(config) {\n        this.name = \"SvgToPngExportPlugin\";\n        this.config = config;\n    }\n    async runAsync(request, response, logger) {\n        if (request.svgToPng) {\n            this.config = request.svgToPng;\n        } else if (request.SvgToPngExportPlugin) {\n            this.config = request.SvgToPngExportPlugin;\n        }\n        if (!response.svg) {\n            return response;\n        }\n        let fileName = \"default\";\n        if (_.isFunction(this.settings.fileName)) {\n            fileName = this.settings.fileName.call(this, request, response);\n        } else if (_.isString(this.settings.fileName)) {\n            fileName = this.settings.fileName;\n        } else if (request.inputPath) {\n            fileName = this.getFileName(request.inputPath);\n        }\n        const absoluteOutputDir = path.resolve(process.cwd(), this.settings.outputDir);\n        const filePath = absoluteOutputDir + \"/\" + fileName + \".png\";\n        const settings = this.settings;\n\n        // Graphviz svg font sizes are missing a size format (font-size=\"10.00\") and are interpreted by sharp (librsvg) as pixel sizes.\n        // Because of this if density is increased, Sharp (librsvg) will not scale the text with the rest of the image.\n        // To avoid this we have to change all font-sizes to explicit point sizes.\n        // Normally 10px should be converted to 7.5pt and 8px should be converted to 6pt\n        // For some unknown reason this leads to wrong results\n        // Instead 10px has to be convertd to 9pt and 8px has to be converted to 7.5pt to obtain satisfactory results.\n        // This will break if font sizes or if the viz.js svg output change. :(\n        let convertedSvg = response.svg;\n        convertedSvg = this.replaceAll(convertedSvg, 'font-size=\"10.00\"', 'font-size=\"9pt\"');\n        convertedSvg = this.replaceAll(convertedSvg, 'font-size=\"8.00\"', 'font-size=\"7.5pt\"');\n\n        await new Promise((resolve, reject) => {\n            mkdirp(absoluteOutputDir, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        if (settings.width && settings.height) {\n            await sharp(new Buffer(convertedSvg), { density: settings.density })\n                .resize(settings.width, settings.height)\n                .max()\n                .png()\n                .toFile(filePath);\n        } else {\n            await sharp(new Buffer(convertedSvg), { density: settings.density })\n                .png()\n                .toFile(filePath);\n        }\n        // const browser = await puppeteer.launch();\n        // const page = await browser.newPage();\n        // const htmlString = `<html><head></head><body><div id='map'>${\n        //     response.svg\n        // }</div></body></html>`;\n        // await page.setContent(htmlString);\n\n        // const rect = await page.evaluate(selector => {\n        //     const element = document.querySelector(\"#map\");\n        //     if (!element) return null;\n        //     return element.getBoundingClientRect();\n        // }, selector);\n        // await page.screenshot({\n        //     path: filePath,\n        //     clip: rect\n        // });\n        return response;\n    }\n    getFileName(file) {\n        let extension = path.extname(file);\n        return path.basename(file, extension);\n    }\n    replaceAll(str, find, replace) {\n        return str.replace(new RegExp(find, \"g\"), replace);\n    }\n}\nmodule.exports = {\n    SvgToPngExportPlugin: SvgToPngExportPlugin\n};\n"]}