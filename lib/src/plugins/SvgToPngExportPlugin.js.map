{"version":3,"sources":["../../../src/plugins/SvgToPngExportPlugin.js"],"names":["_","path","require","sharp","mkdirp","SvgToPngExportPlugin","constructor","config","name","defaults","defaultsDeep","outputDir","density","format","getSettings","request","svgToPng","prepare","runAsync","response","svg","settings","fileName","isFunction","call","isString","inputPath","getFileName","absoluteOutputDir","resolve","process","cwd","filePath","convertedSvg","replaceAll","Promise","reject","err","width","height","Buffer","resize","max","png","toFile","file","extension","extname","basename","str","find","replace","RegExp","module","exports"],"mappings":"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","file":"SvgToPngExportPlugin.js","sourcesContent":["let path = require(\"path\");\nimport * as _ from \"lodash\";\nconst sharp = require(\"sharp\");\nlet mkdirp = require(\"mkdirp\");\n\nclass SvgToPngExportPlugin {\n    constructor(config) {\n        this.name = \"SvgToPngExportPlugin\";\n        this.defaults = _.defaultsDeep({}, config, {\n            outputDir: \"./png\",\n            density: 300,\n            format: \"png\"\n        });\n    }\n    getSettings(request) {\n        if (request.svgToPng) {\n            return request.svgToPng;\n        } else if (request.SvgToPngExportPlugin) {\n            return request.SvgToPngExportPlugin;\n        } else {\n            request.svgToPng = {};\n            return request.svgToPng;\n        }\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    async runAsync(request, response) {\n        if (!response.svg) {\n            return response;\n        }\n        const settings = this.getSettings(request);\n        let fileName = \"default\";\n        if (_.isFunction(settings.fileName)) {\n            fileName = settings.fileName.call(this, request, response);\n        } else if (_.isString(settings.fileName)) {\n            fileName = settings.fileName;\n        } else if (request.inputPath) {\n            fileName = this.getFileName(request.inputPath);\n        }\n        const absoluteOutputDir = path.resolve(process.cwd(), settings.outputDir);\n        const filePath = absoluteOutputDir + \"/\" + fileName + \".png\";\n\n        // Graphviz svg font sizes are missing a size format (font-size=\"10.00\") and are interpreted by sharp (librsvg) as pixel sizes.\n        // Because of this if density is increased, Sharp (librsvg) will not scale the text with the rest of the image.\n        // To avoid this we have to change all font-sizes to explicit point sizes.\n        // Normally 10px should be converted to 7.5pt and 8px should be converted to 6pt\n        // For some unknown reason this leads to wrong results\n        // Instead 10px has to be convertd to 9pt and 8px has to be converted to 7.5pt to obtain satisfactory results.\n        // This will break if font sizes or if the viz.js svg output change. :(\n        let convertedSvg = response.svg;\n        convertedSvg = this.replaceAll(convertedSvg, 'font-size=\"10.00\"', 'font-size=\"9pt\"');\n        convertedSvg = this.replaceAll(convertedSvg, 'font-size=\"8.00\"', 'font-size=\"7.5pt\"');\n\n        await new Promise((resolve, reject) => {\n            mkdirp(absoluteOutputDir, function(err) {\n                if (err) {\n                    reject(err);\n                }\n                resolve();\n            });\n        });\n        if (settings.width && settings.height) {\n            await sharp(new Buffer(convertedSvg), { density: settings.density })\n                .resize(settings.width, settings.height)\n                .max()\n                .png()\n                .toFile(filePath);\n        } else {\n            await sharp(new Buffer(convertedSvg), { density: settings.density })\n                .png()\n                .toFile(filePath);\n        }\n        // const browser = await puppeteer.launch();\n        // const page = await browser.newPage();\n        // const htmlString = `<html><head></head><body><div id='map'>${\n        //     response.svg\n        // }</div></body></html>`;\n        // await page.setContent(htmlString);\n\n        // const rect = await page.evaluate(selector => {\n        //     const element = document.querySelector(\"#map\");\n        //     if (!element) return null;\n        //     return element.getBoundingClientRect();\n        // }, selector);\n        // await page.screenshot({\n        //     path: filePath,\n        //     clip: rect\n        // });\n        return response;\n    }\n    getFileName(file) {\n        let extension = path.extname(file);\n        return path.basename(file, extension);\n    }\n    replaceAll(str, find, replace) {\n        return str.replace(new RegExp(find, \"g\"), replace);\n    }\n}\nmodule.exports = {\n    SvgToPngExportPlugin: SvgToPngExportPlugin\n};\n"]}