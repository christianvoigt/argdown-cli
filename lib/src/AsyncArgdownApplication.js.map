{"version":3,"sources":["../../src/AsyncArgdownApplication.js"],"names":["_","AsyncArgdownApplication","runAsync","request","response","processorsToRun","logger","setLevel","resp","logLevel","process","isArray","isString","processes","isEmpty","log","processorId","processor","processors","plugin","plugins","isFunction","prepare","name","ast","walker","walk","run","module","exports"],"mappings":"AAAA;;AACA;;IAAYA,C;;AACZ;;;;AAEA,MAAMC,uBAAN,2CAAyD;AACvD,QAAMC,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkC;AAChC,QAAIC,kBAAkB,IAAtB;AACA,SAAKC,MAAL,CAAYC,QAAZ,CAAqB,OAArB;AACA,QAAIC,OAAOJ,YAAY,EAAvB;;AAEA,QAAID,OAAJ,EAAa;AACX,UAAIA,QAAQM,QAAZ,EAAsB;AACpB,aAAKH,MAAL,CAAYC,QAAZ,CAAqBJ,QAAQM,QAA7B;AACD;AACD,UAAIN,QAAQO,OAAZ,EAAqB;AACnB,YAAIV,EAAEW,OAAF,CAAUR,QAAQO,OAAlB,CAAJ,EAAgC;AAC9BL,4BAAkBF,QAAQO,OAA1B;AACD,SAFD,MAEO,IAAIV,EAAEY,QAAF,CAAWT,QAAQO,OAAnB,KAA+BP,QAAQU,SAA3C,EAAsD;AAC3DR,4BAAkBF,QAAQU,SAAR,CAAkBV,QAAQO,OAA1B,CAAlB;AACD;AACF;AACF;;AAED,QAAIV,EAAEc,OAAF,CAAUT,eAAV,CAAJ,EAAgC;AAC9B,WAAKC,MAAL,CAAYS,GAAZ,CAAgB,SAAhB,EAA2B,uBAA3B;AACA,aAAOP,IAAP;AACD;AACD,SAAK,IAAIQ,WAAT,IAAwBX,eAAxB,EAAyC;AACvC,UAAIY,YAAY,KAAKC,UAAL,CAAgBF,WAAhB,CAAhB;AACA,UAAI,CAACC,SAAL,EAAgB;AACd,aAAKX,MAAL,CAAYS,GAAZ,CAAgB,SAAhB,EAA2B,0BAA0BC,WAArD;AACA;AACD;;AAED,WAAK,IAAIG,MAAT,IAAmBF,UAAUG,OAA7B,EAAsC;AACpC,YAAIpB,EAAEqB,UAAF,CAAaF,OAAOG,OAApB,CAAJ,EAAkC;AAChC,eAAKhB,MAAL,CAAYS,GAAZ,CAAgB,SAAhB,EAA2B,uBAAuBI,OAAOI,IAAzD;AACAJ,iBAAOG,OAAP,CAAenB,OAAf,EAAwBK,IAAxB,EAA8B,KAAKF,MAAnC;AACD;AACF;;AAED,UAAIE,KAAKgB,GAAL,IAAYP,UAAUQ,MAA1B,EAAkC;AAChCR,kBAAUQ,MAAV,CAAiBC,IAAjB,CAAsBvB,OAAtB,EAA+BK,IAA/B,EAAqC,KAAKF,MAA1C;AACD;;AAED,WAAK,IAAIa,MAAT,IAAmBF,UAAUG,OAA7B,EAAsC;AACpC,aAAKd,MAAL,CAAYS,GAAZ,CAAgB,SAAhB,EAA2B,qBAAqBI,OAAOI,IAAvD;AACA,YAAIvB,EAAEqB,UAAF,CAAaF,OAAOjB,QAApB,CAAJ,EAAmC;AACjC,gBAAMiB,OAAOjB,QAAP,CAAgBC,OAAhB,EAAyBK,IAAzB,EAA+B,KAAKF,MAApC,CAAN;AACD,SAFD,MAEO,IAAIN,EAAEqB,UAAF,CAAaF,OAAOQ,GAApB,CAAJ,EAA8B;AACnCR,iBAAOQ,GAAP,CAAWxB,OAAX,EAAoBK,IAApB,EAA0B,KAAKF,MAA/B;AACD;AACF;AACF;AACD,WAAOE,IAAP;AACD;AAnDsD;AAqDzDoB,OAAOC,OAAP,GAAiB;AACf5B,2BAAyBA;AADV,CAAjB","file":"AsyncArgdownApplication.js","sourcesContent":["\"use strict\";\nimport * as _ from \"lodash\";\nimport { ArgdownApplication } from \"argdown-parser\";\n\nclass AsyncArgdownApplication extends ArgdownApplication {\n  async runAsync(request, response) {\n    let processorsToRun = null;\n    this.logger.setLevel(\"error\");\n    let resp = response || {};\n\n    if (request) {\n      if (request.logLevel) {\n        this.logger.setLevel(request.logLevel);\n      }\n      if (request.process) {\n        if (_.isArray(request.process)) {\n          processorsToRun = request.process;\n        } else if (_.isString(request.process) && request.processes) {\n          processorsToRun = request.processes[request.process];\n        }\n      }\n    }\n\n    if (_.isEmpty(processorsToRun)) {\n      this.logger.log(\"verbose\", \"No processors to run.\");\n      return resp;\n    }\n    for (let processorId of processorsToRun) {\n      let processor = this.processors[processorId];\n      if (!processor) {\n        this.logger.log(\"verbose\", \"Processor not found: \" + processorId);\n        continue;\n      }\n\n      for (let plugin of processor.plugins) {\n        if (_.isFunction(plugin.prepare)) {\n          this.logger.log(\"verbose\", \"Preparing plugin: \" + plugin.name);\n          plugin.prepare(request, resp, this.logger);\n        }\n      }\n\n      if (resp.ast && processor.walker) {\n        processor.walker.walk(request, resp, this.logger);\n      }\n\n      for (let plugin of processor.plugins) {\n        this.logger.log(\"verbose\", \"Running plugin: \" + plugin.name);\n        if (_.isFunction(plugin.runAsync)) {\n          await plugin.runAsync(request, resp, this.logger);\n        } else if (_.isFunction(plugin.run)) {\n          plugin.run(request, resp, this.logger);\n        }\n      }\n    }\n    return resp;\n  }\n}\nmodule.exports = {\n  AsyncArgdownApplication: AsyncArgdownApplication\n};\n"]}