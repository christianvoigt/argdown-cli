{"version":3,"sources":["../../src/AsyncArgdownApplication.js"],"names":["_","AsyncArgdownApplication","runAsync","request","response","processorsToRun","logger","setLevel","resp","logLevel","process","isArray","isEmpty","log","processorId","processor","processors","plugin","plugins","isFunction","prepare","name","ast","walker","walk","run","module","exports"],"mappings":"AAAA;;AACA;;IAAYA,C;;AACZ;;;;AAEA,MAAMC,uBAAN,2CAAyD;AACrD,UAAMC,QAAN,CAAeC,OAAf,EAAwBC,QAAxB,EAAkC;AAC9B,YAAIC,kBAAkB,IAAtB;AACA,aAAKC,MAAL,CAAYC,QAAZ,CAAqB,OAArB;AACA,YAAIC,OAAOJ,YAAY,EAAvB;;AAEA,YAAID,OAAJ,EAAa;AACT,gBAAIA,QAAQM,QAAZ,EAAsB;AAClB,qBAAKH,MAAL,CAAYC,QAAZ,CAAqBJ,QAAQM,QAA7B;AACH;AACD,gBAAIN,QAAQO,OAAZ,EAAqB;AACjB,oBAAIV,EAAEW,OAAF,CAAUR,QAAQO,OAAlB,CAAJ,EAAgC;AAC5BL,sCAAkBF,QAAQO,OAA1B;AACH;AACJ;AACJ;;AAED,YAAIV,EAAEY,OAAF,CAAUP,eAAV,CAAJ,EAAgC;AAC5B,iBAAKC,MAAL,CAAYO,GAAZ,CAAgB,SAAhB,EAA2B,uBAA3B;AACA,mBAAOL,IAAP;AACH;AACD,aAAK,IAAIM,WAAT,IAAwBT,eAAxB,EAAyC;AACrC,gBAAIU,YAAY,KAAKC,UAAL,CAAgBF,WAAhB,CAAhB;AACA,gBAAI,CAACC,SAAL,EAAgB;AACZ,qBAAKT,MAAL,CAAYO,GAAZ,CAAgB,SAAhB,EAA2B,0BAA0BC,WAArD;AACA;AACH;;AAED,iBAAK,IAAIG,MAAT,IAAmBF,UAAUG,OAA7B,EAAsC;AAClC,oBAAIlB,EAAEmB,UAAF,CAAaF,OAAOG,OAApB,CAAJ,EAAkC;AAC9B,yBAAKd,MAAL,CAAYO,GAAZ,CAAgB,SAAhB,EAA2B,uBAAuBI,OAAOI,IAAzD;AACAJ,2BAAOG,OAAP,CAAejB,OAAf,EAAwBK,IAAxB,EAA8B,KAAKF,MAAnC;AACH;AACJ;;AAED,gBAAIE,KAAKc,GAAL,IAAYP,UAAUQ,MAA1B,EAAkC;AAC9BR,0BAAUQ,MAAV,CAAiBC,IAAjB,CAAsBrB,OAAtB,EAA+BK,IAA/B,EAAqC,KAAKF,MAA1C;AACH;;AAED,iBAAK,IAAIW,MAAT,IAAmBF,UAAUG,OAA7B,EAAsC;AAClC,qBAAKZ,MAAL,CAAYO,GAAZ,CAAgB,SAAhB,EAA2B,qBAAqBI,OAAOI,IAAvD;AACA,oBAAIrB,EAAEmB,UAAF,CAAaF,OAAOf,QAApB,CAAJ,EAAmC;AAC/B,0BAAMe,OAAOf,QAAP,CAAgBC,OAAhB,EAAyBK,IAAzB,EAA+B,KAAKF,MAApC,CAAN;AACH,iBAFD,MAEO,IAAIN,EAAEmB,UAAF,CAAaF,OAAOQ,GAApB,CAAJ,EAA8B;AACjCR,2BAAOQ,GAAP,CAAWtB,OAAX,EAAoBK,IAApB,EAA0B,KAAKF,MAA/B;AACH;AACJ;AACJ;AACD,eAAOE,IAAP;AACH;AAjDoD;AAmDzDkB,OAAOC,OAAP,GAAiB;AACb1B,6BAAyBA;AADZ,CAAjB","file":"AsyncArgdownApplication.js","sourcesContent":["\"use strict\";\nimport * as _ from \"lodash\";\nimport { ArgdownApplication } from \"argdown-parser\";\n\nclass AsyncArgdownApplication extends ArgdownApplication {\n    async runAsync(request, response) {\n        let processorsToRun = null;\n        this.logger.setLevel(\"error\");\n        let resp = response || {};\n\n        if (request) {\n            if (request.logLevel) {\n                this.logger.setLevel(request.logLevel);\n            }\n            if (request.process) {\n                if (_.isArray(request.process)) {\n                    processorsToRun = request.process;\n                }\n            }\n        }\n\n        if (_.isEmpty(processorsToRun)) {\n            this.logger.log(\"verbose\", \"No processors to run.\");\n            return resp;\n        }\n        for (let processorId of processorsToRun) {\n            let processor = this.processors[processorId];\n            if (!processor) {\n                this.logger.log(\"verbose\", \"Processor not found: \" + processorId);\n                continue;\n            }\n\n            for (let plugin of processor.plugins) {\n                if (_.isFunction(plugin.prepare)) {\n                    this.logger.log(\"verbose\", \"Preparing plugin: \" + plugin.name);\n                    plugin.prepare(request, resp, this.logger);\n                }\n            }\n\n            if (resp.ast && processor.walker) {\n                processor.walker.walk(request, resp, this.logger);\n            }\n\n            for (let plugin of processor.plugins) {\n                this.logger.log(\"verbose\", \"Running plugin: \" + plugin.name);\n                if (_.isFunction(plugin.runAsync)) {\n                    await plugin.runAsync(request, resp, this.logger);\n                } else if (_.isFunction(plugin.run)) {\n                    plugin.run(request, resp, this.logger);\n                }\n            }\n        }\n        return resp;\n    }\n}\nmodule.exports = {\n    AsyncArgdownApplication: AsyncArgdownApplication\n};\n"]}