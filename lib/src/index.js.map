{"version":3,"sources":["../../src/index.js"],"names":["_","glob","require","fs","chokidar","requireUncached","app","preprocessor","htmlExport","tagConfiguration","mapMaker","dotExport","argmlExport","jsonExport","saveAsHtml","outputDir","dataKey","extension","copyDefaultCss","saveAsDot","saveAsArgML","saveAsJSON","addPlugin","load","config","input","$","watch","watcher","watcherConfig","cloneDeep","on","verbose","console","log","path","er","files","file","readFileSync","saveAs","sourceFile","run","e","loadJSFile","filePath","message","loadConfig","process","cwd","CopyDefaultCssPlugin","SaveAsFilePlugin"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;IAAYA,C;;;;AAEZ,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,KAAKD,QAAQ,IAAR,CAAT;AACA,IAAIE,WAAWF,QAAQ,UAAR,CAAf;AACA,IAAIG,kBAAkBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAMI,MAAM,uCAAZ;AACA,IAAMC,eAAe,wCAArB;AACA,IAAMC,aAAa,+BAAnB;AACA,IAAMC,mBAAmB,qCAAzB;AACA,IAAMC,WAAW,+BAAjB;AACA,IAAMC,YAAY,gCAAlB;AACA,IAAMC,cAAc,kCAApB;AACA,IAAMC,aAAa,+BAAnB;AACA,IAAMC,aAAa,uCAAqB;AACtCC,aAAW,QAD2B;AAEtCC,WAAS,MAF6B;AAGtCC,aAAW;AAH2B,CAArB,CAAnB;AAKA,IAAMC,iBAAiB,gDAAvB;;AAEA,IAAMC,YAAY,uCAAqB;AACrCJ,aAAW,OAD0B;AAErCC,WAAS,KAF4B;AAGrCC,aAAW;AAH0B,CAArB,CAAlB;AAKA,IAAMG,cAAc,uCAAqB;AACvCL,aAAW,WAD4B;AAEvCC,WAAS,OAF8B;AAGvCC,aAAW;AAH4B,CAArB,CAApB;AAKA,IAAMI,aAAa,uCAAqB;AACtCN,aAAW,QAD2B;AAEtCC,WAAS,MAF6B;AAGtCC,aAAW;AAH2B,CAArB,CAAnB;AAKAX,IAAIgB,SAAJ,CAAcf,YAAd,EAA4B,cAA5B;AACAD,IAAIgB,SAAJ,CAAcb,gBAAd,EAAgC,cAAhC;;AAEAH,IAAIgB,SAAJ,CAAcd,UAAd,EAA0B,aAA1B;AACAF,IAAIgB,SAAJ,CAAcJ,cAAd,EAA8B,kBAA9B;AACAZ,IAAIgB,SAAJ,CAAcR,UAAd,EAA0B,cAA1B;;AAEAR,IAAIgB,SAAJ,CAAcZ,QAAd,EAAwB,aAAxB;AACAJ,IAAIgB,SAAJ,CAAcT,UAAd,EAA0B,aAA1B;AACAP,IAAIgB,SAAJ,CAAcD,UAAd,EAA0B,cAA1B;;AAEAf,IAAIgB,SAAJ,CAAcZ,QAAd,EAAwB,YAAxB;AACAJ,IAAIgB,SAAJ,CAAcX,SAAd,EAAyB,YAAzB;AACAL,IAAIgB,SAAJ,CAAcH,SAAd,EAAyB,aAAzB;;AAEAb,IAAIgB,SAAJ,CAAcZ,QAAd,EAAwB,cAAxB;AACAJ,IAAIgB,SAAJ,CAAcV,WAAd,EAA2B,cAA3B;AACAN,IAAIgB,SAAJ,CAAcF,WAAd,EAA2B,eAA3B;;AAEAd,IAAIiB,IAAJ,GAAW,UAASC,MAAT,EAAgB;AACzB,MAAG,CAACA,OAAOC,KAAX,EAAiB;AACfD,WAAOC,KAAP,GAAe,aAAf;AACD;AACD,MAAMC,IAAI,IAAV;AACA,MAAGF,OAAOG,KAAV,EAAgB;AACd,QAAMC,UAAUxB,SAASuB,KAAT,CAAeH,OAAOC,KAAtB,EAA6B,EAA7B,CAAhB;AACA,QAAMI,gBAAgB7B,EAAE8B,SAAF,CAAYN,MAAZ,CAAtB;AACAK,kBAAcF,KAAd,GAAsB,KAAtB;;AAEAC,YACCG,EADD,CACI,KADJ,EACW,gBAAQ;AACjB,UAAGP,OAAOQ,OAAV,EAAkB;AAChBC,gBAAQC,GAAR,WAAoBC,IAApB;AACD;AACDN,oBAAcJ,KAAd,GAAsBU,IAAtB;AACAT,QAAEH,IAAF,CAAOM,aAAP;AACD,KAPD,EAQCE,EARD,CAQI,QARJ,EAQc,gBAAQ;AACpB,UAAGP,OAAOQ,OAAV,EAAkB;AAChBC,gBAAQC,GAAR,WAAoBC,IAApB;AACD;AACDN,oBAAcJ,KAAd,GAAsBU,IAAtB;AACAT,QAAEH,IAAF,CAAOM,aAAP;AACD,KAdD,EAeCE,EAfD,CAeI,QAfJ,EAec,gBAAQ;AACpB,UAAGP,OAAOQ,OAAV,EAAkB;AAChBC,gBAAQC,GAAR,WAAoBC,IAApB;AACD;AACF,KAnBD;AAoBD,GAzBD,MAyBK;AACHlC,SAAKuB,OAAOC,KAAZ,EAAmB,UAAUW,EAAV,EAAcC,KAAd,EAAqB;AACtC,UAAGD,EAAH,EAAM;AACJH,gBAAQC,GAAR,CAAYE,EAAZ;AACA;AACD,OAHD,MAGK;AAAA;AAAA;AAAA;;AAAA;AACH,+BAAgBC,KAAhB,8HAAsB;AAAA,gBAAdC,IAAc;;AACpB,gBAAGd,OAAOQ,OAAV,EAAkB;AAChBC,sBAAQC,GAAR,CAAY,sBAAoBI,IAAhC;AACD;AACD,gBAAG;AACD,kBAAMb,QAAQtB,GAAGoC,YAAH,CAAgBD,IAAhB,EAAsB,MAAtB,CAAd;AACAd,qBAAOgB,MAAP,GAAgBhB,OAAOgB,MAAP,IAAgB,EAAhC;AACAhB,qBAAOgB,MAAP,CAAcC,UAAd,GAA2BH,IAA3B;AACAZ,gBAAEgB,GAAF,CAAM,EAACjB,OAAOA,KAAR,EAAeD,QAAOA,MAAtB,EAAN;AACD,aALD,CAKC,OAAMmB,CAAN,EAAQ;AACPV,sBAAQC,GAAR,CAAYS,CAAZ;AACD;AACF;AAbE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcJ;AACF,KAnBD;AAoBD;AACF,CApDD;;AAsDA;;;;;;;;AAQArC,IAAIsC,UAAJ,GAAiB,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC3C,MAAI;AACA,WAAOxC,gBAAgBwC,QAAhB,CAAP;AACH,GAFD,CAEE,OAAOF,CAAP,EAAU;AACRA,MAAEG,OAAF,0BAAiCD,QAAjC,iBAAqDF,EAAEG,OAAvD;AACA,UAAMH,CAAN;AACH;AACJ,CAPD;;AASArC,IAAIyC,UAAJ,GAAiB,UAASF,QAAT,EAAkB;AACjCA,aAAWA,YAAWG,QAAQC,GAAR,KAAc,oBAApC;AACA,MAAIzB,SAAS,EAAb;AACA,MAAG;AACDA,aAAS,KAAKoB,UAAL,CAAgBC,QAAhB,CAAT;AACAZ,YAAQC,GAAR,CAAYV,MAAZ;AACD,GAHD,CAGC,OAAMmB,CAAN,EAAQ;AACPV,YAAQC,GAAR,CAAYS,CAAZ;AACD;AACD,SAAOnB,MAAP;AACD,CAVD;;QAaElB,G,GAAAA,G;QAAK4C,oB;QAAsBC,gB","file":"index.js","sourcesContent":["import {ArgdownApplication, ArgdownPreprocessor, HtmlExport, JSONExport, TagConfiguration} from 'argdown-parser';\nimport {MapMaker, DotExport, ArgMLExport} from 'argdown-map-maker';\nimport {SaveAsFilePlugin} from './plugins/SaveAsFilePlugin.js';\nimport {CopyDefaultCssPlugin} from './plugins/CopyDefaultCssPlugin.js';\nimport * as _ from 'lodash';\n\nlet glob = require('glob');\nlet fs = require('fs');\nlet chokidar = require('chokidar');\nlet requireUncached = require(\"require-uncached\");\n\nconst app = new ArgdownApplication();\nconst preprocessor = new ArgdownPreprocessor();\nconst htmlExport = new HtmlExport();\nconst tagConfiguration = new TagConfiguration();\nconst mapMaker = new MapMaker();\nconst dotExport = new DotExport();\nconst argmlExport = new ArgMLExport();\nconst jsonExport = new JSONExport();\nconst saveAsHtml = new SaveAsFilePlugin({\n  outputDir: './html',\n  dataKey: 'html',\n  extension: '.html'\n});\nconst copyDefaultCss = new CopyDefaultCssPlugin();\n\nconst saveAsDot = new SaveAsFilePlugin({\n  outputDir: './dot',\n  dataKey: 'dot',\n  extension: '.dot'\n});\nconst saveAsArgML = new SaveAsFilePlugin({\n  outputDir: './graphml',\n  dataKey: 'argml',\n  extension: '.graphml'\n});\nconst saveAsJSON = new SaveAsFilePlugin({\n  outputDir: './json',\n  dataKey: 'json',\n  extension: '.json'\n});\napp.addPlugin(preprocessor, \"preprocessor\");\napp.addPlugin(tagConfiguration, \"preprocessor\");\n\napp.addPlugin(htmlExport, \"export-html\");\napp.addPlugin(copyDefaultCss, \"copy-default-css\");\napp.addPlugin(saveAsHtml, \"save-as-html\");\n\napp.addPlugin(mapMaker, \"export-json\");\napp.addPlugin(jsonExport, \"export-json\");\napp.addPlugin(saveAsJSON, \"save-as-json\");\n\napp.addPlugin(mapMaker, \"export-dot\");\napp.addPlugin(dotExport, \"export-dot\");\napp.addPlugin(saveAsDot, \"save-as-dot\");\n\napp.addPlugin(mapMaker, \"export-argml\");\napp.addPlugin(argmlExport, \"export-argml\");\napp.addPlugin(saveAsArgML, \"save-as-argml\");\n\napp.load = function(config){\n  if(!config.input){\n    config.input = \"./*.argdown\";\n  }\n  const $ = this;\n  if(config.watch){\n    const watcher = chokidar.watch(config.input, {});\n    const watcherConfig = _.cloneDeep(config);\n    watcherConfig.watch = false;\n    \n    watcher\n    .on('add', path => {\n      if(config.verbose){\n        console.log(`File ${path} has been added.`);        \n      }\n      watcherConfig.input = path;\n      $.load(watcherConfig);\n    })\n    .on('change', path => {\n      if(config.verbose){\n        console.log(`File ${path} has been changed.`);        \n      }\n      watcherConfig.input = path;\n      $.load(watcherConfig);\n    })\n    .on('unlink', path => {\n      if(config.verbose){\n        console.log(`File ${path} has been removed.`);        \n      }\n    });    \n  }else{\n    glob(config.input, function (er, files) {\n      if(er){\n        console.log(er);\n        return;\n      }else{\n        for(let file of files){\n          if(config.verbose){\n            console.log(\"Processing file: \"+file);\n          }\n          try{\n            const input = fs.readFileSync(file, 'utf8');\n            config.saveAs = config.saveAs ||{};\n            config.saveAs.sourceFile = file;\n            $.run({input: input, config:config});            \n          }catch(e){\n            console.log(e);\n          }\n        }\n      }\n    });    \n  }\n}\n\n/**\n * Taken from eslint: https://github.com/eslint/eslint/blob/master/lib/config/config-file.js\n * Loads a JavaScript configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\napp.loadJSFile = function loadJSFile(filePath) {\n    try {\n        return requireUncached(filePath);\n    } catch (e) {\n        e.message = `Cannot read file: ${filePath}\\nError: ${e.message}`;\n        throw e;\n    }\n}\n\napp.loadConfig = function(filePath){\n  filePath = filePath ||process.cwd()+'/argdown.config.js';\n  let config = {};\n  try{\n    config = this.loadJSFile(filePath);\n    console.log(config);\n  }catch(e){\n    console.log(e);\n  }\n  return config;\n}\n\nexport {\n  app, CopyDefaultCssPlugin, SaveAsFilePlugin\n};\n"]}