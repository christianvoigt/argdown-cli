{"version":3,"sources":["../../src/index.js"],"names":["_","readFile","glob","require","path","chokidar","requireUncached","app","includePlugin","parserPlugin","logParserErrorsPlugin","modelPlugin","htmlExport","tagPlugin","mapMaker","dotExport","jsonExport","saveAsHtml","outputDir","dataKey","extension","copyDefaultCss","dotToSvgExport","saveSvgAsSvg","saveSvgAsPdf","saveSvgAsPng","saveAsDot","saveAsJSON","saveAsArgdown","isRequestData","stdoutDot","stdoutSvg","stdoutJSON","stdoutHtml","stdoutArgdown","addPlugin","load","config","request","defaults","inputGlob","inputPath","ignoreFiles","ignore","rootPath","process","cwd","logLevel","logger","setLevel","$","absoluteInputGlob","resolve","loadOptions","watch","watcher","watcherRequest","cloneDeep","on","log","files","Promise","reject","er","promises","file","push","then","input","requestForFile","clone","runAsync","all","loadJSFile","filePath","absoluteFilePath","e","message","loadConfig","jsModuleExports","AsyncArgdownApplication","CopyDefaultCssPlugin","SaveAsFilePlugin","SvgToPdfExportPlugin","SvgToPngExportPlugin","LogParserErrorsPlugin","DotToSvgExportPlugin"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nimport { AsyncArgdownApplication } from \"./AsyncArgdownApplication.js\";\nimport {\n    ParserPlugin,\n    ModelPlugin,\n    HtmlExport,\n    JSONExport,\n    TagPlugin\n} from \"argdown-parser\";\nimport { MapMaker, DotExport } from \"argdown-map-maker\";\nimport { SaveAsFilePlugin } from \"./plugins/SaveAsFilePlugin.js\";\nimport { DotToSvgExportPlugin } from \"./plugins/DotToSvgExportPlugin.js\";\nimport { SvgToPdfExportPlugin } from \"./plugins/SvgToPdfExportPlugin.js\";\nimport { SvgToPngExportPlugin } from \"./plugins/SvgToPngExportPlugin.js\";\nimport { CopyDefaultCssPlugin } from \"./plugins/CopyDefaultCssPlugin.js\";\nimport { LogParserErrorsPlugin } from \"./plugins/LogParserErrorsPlugin.js\";\nimport { StdOutPlugin } from \"./plugins/StdOutPlugin.js\";\nimport { IncludePlugin } from \"./plugins/IncludePlugin.js\";\nimport * as _ from \"lodash\";\nimport fs from \"fs\";\nimport { promisify } from \"util\";\n\nconst readFile = promisify(fs.readFile);\n\nlet glob = require(\"glob\");\nlet path = require(\"path\");\nlet chokidar = require(\"chokidar\");\nlet requireUncached = require(\"require-uncached\");\n\nconst app = new AsyncArgdownApplication();\nconst includePlugin = new IncludePlugin();\nconst parserPlugin = new ParserPlugin();\nconst logParserErrorsPlugin = new LogParserErrorsPlugin();\nconst modelPlugin = new ModelPlugin();\nconst htmlExport = new HtmlExport();\nconst tagPlugin = new TagPlugin();\nconst mapMaker = new MapMaker();\nconst dotExport = new DotExport();\nconst jsonExport = new JSONExport();\nconst saveAsHtml = new SaveAsFilePlugin({\n    outputDir: \"./html\",\n    dataKey: \"html\",\n    extension: \".html\"\n});\nconst copyDefaultCss = new CopyDefaultCssPlugin();\nconst dotToSvgExport = new DotToSvgExportPlugin();\nconst saveSvgAsSvg = new SaveAsFilePlugin({\n    outputDir: \"./svg\",\n    dataKey: \"svg\",\n    extension: \".svg\"\n});\nconst saveSvgAsPdf = new SvgToPdfExportPlugin();\nconst saveSvgAsPng = new SvgToPngExportPlugin();\n\nconst saveAsDot = new SaveAsFilePlugin({\n    outputDir: \"./dot\",\n    dataKey: \"dot\",\n    extension: \".dot\"\n});\nconst saveAsJSON = new SaveAsFilePlugin({\n    outputDir: \"./json\",\n    dataKey: \"json\",\n    extension: \".json\"\n});\nconst saveAsArgdown = new SaveAsFilePlugin({\n    outputDir: \"./compiled\",\n    dataKey: \"input\",\n    extension: \".argdown\",\n    isRequestData: true\n});\nconst stdoutDot = new StdOutPlugin({ dataKey: \"dot\" });\nconst stdoutSvg = new StdOutPlugin({ dataKey: \"svg\" });\nconst stdoutJSON = new StdOutPlugin({ dataKey: \"json\" });\nconst stdoutHtml = new StdOutPlugin({ dataKey: \"html\" });\nconst stdoutArgdown = new StdOutPlugin({\n    dataKey: \"input\",\n    isRequestData: true\n});\n\napp.addPlugin(includePlugin, \"preprocessor\");\napp.addPlugin(parserPlugin, \"parse-input\");\napp.addPlugin(logParserErrorsPlugin, \"log-parser-errors\");\napp.addPlugin(modelPlugin, \"build-model\");\napp.addPlugin(tagPlugin, \"build-model\");\n\napp.addPlugin(stdoutArgdown, \"stdout-argdown\");\napp.addPlugin(saveAsArgdown, \"save-as-argdown\");\n\napp.addPlugin(htmlExport, \"export-html\");\napp.addPlugin(copyDefaultCss, \"copy-default-css\");\napp.addPlugin(saveAsHtml, \"save-as-html\");\napp.addPlugin(stdoutHtml, \"stdout-html\");\n\napp.addPlugin(mapMaker, \"export-json\");\napp.addPlugin(jsonExport, \"export-json\");\napp.addPlugin(saveAsJSON, \"save-as-json\");\napp.addPlugin(stdoutJSON, \"stdout-json\");\n\napp.addPlugin(mapMaker, \"export-dot\");\napp.addPlugin(dotExport, \"export-dot\");\napp.addPlugin(saveAsDot, \"save-as-dot\");\napp.addPlugin(stdoutDot, \"stdout-dot\");\napp.addPlugin(dotToSvgExport, \"export-svg\");\napp.addPlugin(saveSvgAsSvg, \"save-svg-as-svg\");\napp.addPlugin(stdoutSvg, \"stdout-svg\");\napp.addPlugin(saveSvgAsPdf, \"save-svg-as-pdf\");\napp.addPlugin(saveSvgAsPng, \"save-svg-as-png\");\n\napp.load = async function(config) {\n    const request = _.defaults({}, config);\n    const inputGlob = request.inputPath || \"./*.argdown\";\n    const ignoreFiles = request.ignore || [\n        \"**/_*\", // Exclude files starting with '_'.\n        \"**/_*/**\" // Exclude entire directories starting with '_'.\n    ];\n    if (!request.rootPath) {\n        request.rootPath = process.cwd();\n    }\n    if (request.logLevel) {\n        app.logger.setLevel(request.logLevel);\n    }\n\n    const $ = this;\n    let absoluteInputGlob = path.resolve(request.rootPath, inputGlob);\n    const loadOptions = {};\n    if (ignoreFiles) {\n        loadOptions.ignore = ignoreFiles;\n    }\n    if (request.watch) {\n        const watcher = chokidar.watch(absoluteInputGlob, loadOptions);\n        const watcherRequest = _.cloneDeep(request);\n        watcherRequest.watch = false;\n\n        watcher\n            .on(\"add\", path => {\n                app.logger.log(\"verbose\", `File ${path} has been added.`);\n                watcherRequest.inputPath = path;\n                $.load(loadOptions);\n            })\n            .on(\"change\", path => {\n                app.logger.log(\"verbose\", `File ${path} has been changed.`);\n                watcherRequest.inputPath = path;\n                $.load(loadOptions);\n            })\n            .on(\"unlink\", path => {\n                app.logger.log(\"verbose\", `File ${path} has been removed.`);\n            });\n    } else {\n        let files = await new Promise((resolve, reject) => {\n            glob(absoluteInputGlob, loadOptions, function(er, files) {\n                if (er) {\n                    reject(er);\n                }\n                resolve(files);\n            });\n        });\n        const promises = [];\n        for (let file of files) {\n            app.logger.log(\"verbose\", \"Reading file: \" + file);\n            promises.push(\n                readFile(file, \"utf8\").then(input => {\n                    app.logger.log(\n                        \"verbose\",\n                        \"Reading file completed, starting processing: \" + file\n                    );\n                    const requestForFile = _.clone(request);\n                    requestForFile.input = input;\n                    requestForFile.inputPath = file;\n                    return $.runAsync(requestForFile);\n                })\n            );\n        }\n        await Promise.all(promises);\n    }\n};\n\n/**\n * Taken from eslint: https://github.com/eslint/eslint/blob/master/lib/config/config-file.js\n * Loads a JavaScript configuration from a file.\n * @param {string} filePath The filename to load.\n * @returns {Object} The configuration object from the file.\n * @throws {Error} If the file cannot be read.\n * @private\n */\napp.loadJSFile = function loadJSFile(filePath) {\n    let absoluteFilePath = path.resolve(process.cwd(), filePath);\n    try {\n        return requireUncached(absoluteFilePath);\n    } catch (e) {\n        e.message = `Cannot read file: ${absoluteFilePath}\\nError: ${\n            e.message\n        }`;\n        throw e;\n    }\n};\n\napp.loadConfig = function(filePath) {\n    filePath = filePath || \"./argdown.config.js\";\n    let config = {};\n    try {\n        let jsModuleExports = this.loadJSFile(filePath);\n        if (jsModuleExports.config) {\n            config = jsModuleExports.config;\n        } else {\n            // let's try the default export\n            config = jsModuleExports;\n        }\n    } catch (e) {\n        app.logger.log(\"verbose\", \"No config found: \" + e);\n    }\n    return config;\n};\n\nexport {\n    AsyncArgdownApplication,\n    app,\n    CopyDefaultCssPlugin,\n    SaveAsFilePlugin,\n    SvgToPdfExportPlugin,\n    SvgToPngExportPlugin,\n    LogParserErrorsPlugin,\n    DotToSvgExportPlugin\n};\n"]}