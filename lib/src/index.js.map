{"version":3,"sources":["../../src/index.js"],"names":["program","require","glob","fs","chokidar","mkdirp","app","preprocessor","htmlExport","mapMaker","dotExport","argmlExport","jsonExport","saveAsFilePlugin","addPlugin","version","command","description","option","action","_input","_output","options","input","config","headless","css","title","output","watch","watcher","on","console","log","path","exportFile","er","files","file","err","pathToDefaultCssFile","__dirname","copySync","html","useHtmlLabels","titles","onlyTitlesInHtmlLabels","graphname","statementSelectionMode","mode","excludeDisconnected","inclusive","spaces","removeEmbeddedRelations","parse","process","argv","slice","length","outputHelp","src","dest","existsSync","data","readFileSync","writeFileSync","outputDir","format","processors","sourceFile","dataKey","extension","run","e","stack"],"mappings":";AACA;AACA;AACA;;AAEA;AACA;;AAOA;;AACA;;AACA;;AARA,IAAIA,UAAUC,QAAQ,WAAR,CAAd;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,KAAKF,QAAQ,IAAR,CAAT;AACA,IAAIG,WAAWH,QAAQ,UAAR,CAAf;AACA,IAAII,SAASJ,QAAQ,QAAR,CAAb;;AAOA,IAAIK,MAAM,uCAAV;AACA,IAAIC,eAAe,wCAAnB;AACA,IAAIC,aAAa,+BAAjB;AACA,IAAIC,WAAW,+BAAf;AACA,IAAIC,YAAY,gCAAhB;AACA,IAAIC,cAAc,kCAAlB;AACA,IAAIC,aAAa,+BAAjB;AACA,IAAIC,mBAAmB,wCAAvB;AACAP,IAAIQ,SAAJ,CAAcP,YAAd,EAA4B,cAA5B;;AAEAD,IAAIQ,SAAJ,CAAcN,UAAd,EAA0B,aAA1B;AACAF,IAAIQ,SAAJ,CAAcF,UAAd,EAA0B,YAA1B;;AAEAN,IAAIQ,SAAJ,CAAcL,QAAd,EAAwB,YAAxB;AACAH,IAAIQ,SAAJ,CAAcJ,SAAd,EAAyB,YAAzB;;AAEAJ,IAAIQ,SAAJ,CAAcL,QAAd,EAAwB,cAAxB;AACAH,IAAIQ,SAAJ,CAAcH,WAAd,EAA2B,cAA3B;;AAEAL,IAAIQ,SAAJ,CAAcD,gBAAd,EAAgC,cAAhC;;AAEAb,QACGe,OADH,CACW,OADX;;AAGAf,QACGgB,OADH,CACW,uBADX,EAEGC,WAFH,CAEe,oCAFf,EAGGC,MAHH,CAGU,iBAHV,EAG6B,6DAH7B,EAIGA,MAJH,CAIU,kBAJV,EAI6B,8DAJ7B,EAKGA,MALH,CAKU,uBALV,EAKmC,wCALnC,EAMGA,MANH,CAMU,qBANV,EAMiC,uDANjC,EAOGA,MAPH,CAOU,aAPV,EAOyB,sEAPzB,EAQGC,MARH,CAQU,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAkC;AACxC,MAAIC,QAAQH,MAAZ;AACA,MAAII,SAAS,EAAb;;AAEA,MAAGF,QAAQG,QAAX,EACED,OAAOC,QAAP,GAAkB,IAAlB;;AAEF,MAAGH,QAAQI,GAAX,EACEF,OAAOE,GAAP,GAAaJ,QAAQI,GAArB;;AAEF,MAAGJ,QAAQK,KAAX,EACEH,OAAOG,KAAP,GAAeL,QAAQK,KAAvB;;AAEFnB,aAAWgB,MAAX,GAAoBA,MAApB;;AAEA,MAAG,CAACD,KAAJ,EACEA,QAAQ,aAAR;;AAEF,MAAIK,SAASP,OAAb;AACA,MAAG,CAACO,MAAJ,EACEA,SAAS,QAAT;;AAEF,MAAGN,QAAQO,KAAX,EAAiB;AACf,QAAIC,UAAU1B,SAASyB,KAAT,CAAeN,KAAf,EAAsB,EAAtB,CAAd;AACAO,YACCC,EADD,CACI,KADJ,EACW,gBAAQ;AACjBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,MAAzB;AACD,KAJD,EAKCG,EALD,CAKI,QALJ,EAKc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,MAAzB;AACD,KARD,EASCG,EATD,CASI,QATJ,EASc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACD,KAXD;AAYD,GAdD,MAcK;AACHhC,SAAKqB,KAAL,EAAY,UAAUa,EAAV,EAAcC,KAAd,EAAqB;AAC/B,UAAGD,EAAH,EAAM;AACJJ,gBAAQC,GAAR,CAAYG,EAAZ;AACA;AACD,OAHD,MAGK;AACHJ,gBAAQC,GAAR,CAAY,iBAAeI,KAA3B;AADG;AAAA;AAAA;;AAAA;AAEH,+BAAgBA,KAAhB,8HAAsB;AAAA,gBAAdC,IAAc;;AACpBH,uBAAWG,IAAX,EAAiBV,MAAjB,EAAyB,MAAzB;AACD;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKJ;AACF,KAVD;AAWD;AACD,MAAG,CAACN,QAAQI,GAAZ,EAAgB;AACdrB,WAAOuB,MAAP,EAAe,UAAUW,GAAV,EAAe;AAC5B,UAAIA,GAAJ,EAAQ;AACNP,gBAAQC,GAAR,CAAYM,GAAZ;AACD;AACDP,cAAQC,GAAR,CAAY,4CAA0CL,MAAtD;AACA,UAAIY,uBAAuBC,YAAY,gEAAvC;AACAC,eAASF,oBAAT,EAA+BZ,SAAO,cAAtC;AACD,KAPD;AAQD;AACF,CAnEH;;AAqEE5B,QACGgB,OADH,CACW,sBADX,EAEGC,WAFH,CAEe,oCAFf,EAGGC,MAHH,CAGU,YAHV,EAGwB,sCAHxB,EAIGA,MAJH,CAIU,cAJV,EAIyB,gDAJzB,EAKGA,MALH,CAKU,mBALV,EAK+B,oFAL/B,EAMGA,MANH,CAMU,iBANV,EAM6B,4BAN7B,EAOGA,MAPH,CAOU,6BAPV,EAOyC,2CAPzC,EAQGA,MARH,CAQU,aARV,EAQyB,qEARzB,EASGC,MATH,CASU,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAkC;AACxC,MAAIC,QAAQH,MAAZ;AACA,MAAII,SAAS,EAAb;;AAEA,MAAGF,QAAQqB,IAAX,EACEnB,OAAOoB,aAAP,GAAuB,IAAvB;;AAEF,MAAGtB,QAAQuB,MAAX,EACErB,OAAOsB,sBAAP,GAAgCxB,QAAQwB,sBAAxC;;AAEF,MAAGxB,QAAQyB,SAAX,EACEvB,OAAOuB,SAAP,GAAmBzB,QAAQyB,SAA3B;;AAEFrC,YAAUc,MAAV,GAAmBA,MAAnB;;AAEA,MAAG,CAACD,KAAJ,EACEA,QAAQ,aAAR;;AAEF,MAAIK,SAASP,OAAb;AACA,MAAG,CAACO,MAAJ,EACEA,SAAS,OAAT;;AAEF,MAAIoB,yBAAyB,iBAA7B;AACA,MAAG1B,QAAQ2B,IAAX,EAAgB;AACdD,6BAAyB1B,QAAQ2B,IAAjC;AACD;AACD,MAAIC,sBAAsB,IAA1B;AACA,MAAG5B,QAAQ6B,SAAX,EAAqB;AACnBD,0BAAsB,KAAtB;AACD;AACDzC,WAASe,MAAT,GAAkB;AAChBwB,4BAAwBA,sBADR;AAEhBE,yBAAqBA;AAFL,GAAlB;;AAMA,MAAG5B,QAAQO,KAAX,EAAiB;AACf,QAAIC,UAAU1B,SAASyB,KAAT,CAAeN,KAAf,EAAsB,EAAtB,CAAd;AACAO,YACCC,EADD,CACI,KADJ,EACW,gBAAQ;AACjBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,KAAzB;AACD,KAJD,EAKCG,EALD,CAKI,QALJ,EAKc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,KAAzB;AACD,KARD,EASCG,EATD,CASI,QATJ,EASc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACD,KAXD;AAYD,GAdD,MAcK;AACHhC,SAAKqB,KAAL,EAAY,UAAUa,EAAV,EAAcC,KAAd,EAAqB;AAC/B,UAAGD,EAAH,EAAM;AACJJ,gBAAQC,GAAR,CAAYG,EAAZ;AACA;AACD,OAHD,MAGK;AACHJ,gBAAQC,GAAR,CAAY,iBAAeI,KAA3B;AADG;AAAA;AAAA;;AAAA;AAEH,gCAAgBA,KAAhB,mIAAsB;AAAA,gBAAdC,IAAc;;AACpBH,uBAAWG,IAAX,EAAiBV,MAAjB,EAAyB,KAAzB;AACD;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKJ;AACF,KAVD;AAWD;AACF,CAxEH;;AA0EE5B,QACGgB,OADH,CACW,wBADX,EAEGC,WAFH,CAEe,gEAFf,EAGGC,MAHH,CAGU,iBAHV,EAG6B,4BAH7B,EAIGA,MAJH,CAIU,mBAJV,EAI+B,oFAJ/B,EAKGA,MALH,CAKU,aALV,EAKyB,qEALzB,EAMGC,MANH,CAMU,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAkC;AACxC,MAAIC,QAAQH,MAAZ;AACA,MAAII,SAAS,EAAb;;AAEAb,cAAYa,MAAZ,GAAqBA,MAArB;;AAEA,MAAG,CAACD,KAAJ,EACEA,QAAQ,aAAR;;AAEF,MAAIK,SAASP,OAAb;AACA,MAAG,CAACO,MAAJ,EACEA,SAAS,WAAT;;AAEF,MAAIoB,yBAAyB,iBAA7B;AACA,MAAG1B,QAAQ2B,IAAX,EAAgB;AACdD,6BAAyB1B,QAAQ2B,IAAjC;AACD;AACD,MAAIC,sBAAsB,IAA1B;AACA,MAAG5B,QAAQ6B,SAAX,EAAqB;AACnBD,0BAAsB,KAAtB;AACD;AACDzC,WAASe,MAAT,GAAkB;AAChBwB,4BAAwBA,sBADR;AAEhBE,yBAAqBA;AAFL,GAAlB;;AAKA,MAAG5B,QAAQO,KAAX,EAAiB;AACf,QAAIC,UAAU1B,SAASyB,KAAT,CAAeN,KAAf,EAAsB,EAAtB,CAAd;AACAO,YACCC,EADD,CACI,KADJ,EACW,gBAAQ;AACjBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,OAAzB;AACD,KAJD,EAKCG,EALD,CAKI,QALJ,EAKc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,OAAzB;AACD,KARD,EASCG,EATD,CASI,QATJ,EASc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACD,KAXD;AAYD,GAdD,MAcK;AACHhC,SAAKqB,KAAL,EAAY,UAAUa,EAAV,EAAcC,KAAd,EAAqB;AAC/B,UAAGD,EAAH,EAAM;AACJJ,gBAAQC,GAAR,CAAYG,EAAZ;AACA;AACD,OAHD,MAGK;AACHJ,gBAAQC,GAAR,CAAY,iBAAeI,KAA3B;AADG;AAAA;AAAA;;AAAA;AAEH,gCAAgBA,KAAhB,mIAAsB;AAAA,gBAAdC,IAAc;;AACpBH,uBAAWG,IAAX,EAAiBV,MAAjB,EAAyB,OAAzB;AACD;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKJ;AACF,KAVD;AAWD;AACF,CA3DH;;AA6DE5B,QACGgB,OADH,CACW,uBADX,EAEGC,WAFH,CAEe,kCAFf,EAGGC,MAHH,CAGU,cAHV,EAG0B,yCAH1B,EAIGA,MAJH,CAIU,mCAJV,EAI+C,6DAJ/C,EAKGC,MALH,CAKU,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAkC;AACxC,MAAIC,QAAQH,MAAZ;AACA,MAAII,SAAS,EAAb;;AAEAb,cAAYa,MAAZ,GAAqBA,MAArB;;AAEA,MAAG,CAACD,KAAJ,EACEA,QAAQ,aAAR;;AAEF,MAAIK,SAASP,OAAb;AACA,MAAG,CAACO,MAAJ,EACEA,SAAS,WAAT;;AAEF,MAAIwB,SAAS,CAAb;AACA,MAAG9B,QAAQ8B,MAAR,KAAmB,IAAtB,EAA2B;AACzBA,aAAS9B,QAAQ8B,MAAjB;AACD;AACD,MAAIC,0BAA0B,KAA9B;AACA,MAAG/B,QAAQ+B,uBAAX,EAAmC;AACjCA,8BAA0B,KAA1B;AACD;AACD5C,WAASe,MAAT,GAAkB;AAChB4B,YAAQA,MADQ;AAEhBC,6BAAyBA;AAFT,GAAlB;;AAKA,MAAG/B,QAAQO,KAAX,EAAiB;AACf,QAAIC,UAAU1B,SAASyB,KAAT,CAAeN,KAAf,EAAsB,EAAtB,CAAd;AACAO,YACCC,EADD,CACI,KADJ,EACW,gBAAQ;AACjBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,MAAzB;AACD,KAJD,EAKCG,EALD,CAKI,QALJ,EAKc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACAC,iBAAWD,IAAX,EAAiBN,MAAjB,EAAyB,MAAzB;AACD,KARD,EASCG,EATD,CASI,QATJ,EASc,gBAAQ;AACpBC,cAAQC,GAAR,WAAoBC,IAApB;AACD,KAXD;AAYD,GAdD,MAcK;AACHhC,SAAKqB,KAAL,EAAY,UAAUa,EAAV,EAAcC,KAAd,EAAqB;AAC/B,UAAGD,EAAH,EAAM;AACJJ,gBAAQC,GAAR,CAAYG,EAAZ;AACA;AACD,OAHD,MAGK;AACHJ,gBAAQC,GAAR,CAAY,iBAAeI,KAA3B;AADG;AAAA;AAAA;;AAAA;AAEH,gCAAgBA,KAAhB,mIAAsB;AAAA,gBAAdC,IAAc;;AACpBH,uBAAWG,IAAX,EAAiBV,MAAjB,EAAyB,MAAzB;AACD;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKJ;AACF,KAVD;AAWD;AACF,CA1DH;;AA4DN5B,QAAQsD,KAAR,CAAcC,QAAQC,IAAtB;;AAEA,IAAI,CAACD,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,MAA3B,EAAmC;AACjC1D,UAAQ2D,UAAR;AACD;;AAED,SAASjB,QAAT,CAAkBkB,GAAlB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAI,CAAC1D,GAAG2D,UAAH,CAAcF,GAAd,CAAL,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,MAAIG,OAAO5D,GAAG6D,YAAH,CAAgBJ,GAAhB,EAAqB,OAArB,CAAX;AACAzD,KAAG8D,aAAH,CAAiBJ,IAAjB,EAAuBE,IAAvB;AACD;;AAED,SAAS5B,UAAT,CAAoBG,IAApB,EAA0B4B,SAA1B,EAAqCC,MAArC,EAA4C;AAC1C,MAAI;AACA,QAAIC,mBAAJ;AACA,QAAGD,UAAU,MAAb,EAAoB;AAClBtD,uBAAiBW,MAAjB,GAA0B,EAAC0C,WAAWA,SAAZ,EAAuBG,YAAY/B,IAAnC,EAAyCgC,SAAQ,MAAjD,EAAyDC,WAAU,OAAnE,EAA1B;AACAH,mBAAa,CAAC,cAAD,EAAgB,aAAhB,EAA8B,cAA9B,CAAb;AACD,KAHD,MAGM,IAAGD,UAAU,KAAb,EAAmB;AACvBtD,uBAAiBW,MAAjB,GAA0B,EAAC0C,WAAWA,SAAZ,EAAuBG,YAAY/B,IAAnC,EAAyCgC,SAAQ,KAAjD,EAAwDC,WAAU,MAAlE,EAA1B;AACAH,mBAAa,CAAC,cAAD,EAAgB,YAAhB,EAA6B,cAA7B,CAAb;AACD,KAHK,MAGA,IAAGD,UAAU,OAAb,EAAqB;AACzBtD,uBAAiBW,MAAjB,GAA0B,EAAC0C,WAAWA,SAAZ,EAAuBG,YAAY/B,IAAnC,EAAyCgC,SAAQ,OAAjD,EAA0DC,WAAU,UAApE,EAA1B;AACAH,mBAAa,CAAC,cAAD,EAAiB,cAAjB,EAAiC,cAAjC,CAAb;AACD,KAHK,MAGA,IAAGD,UAAU,MAAb,EAAoB;AACxBtD,uBAAiBW,MAAjB,GAA0B,EAAC0C,WAAWA,SAAZ,EAAuBG,YAAY/B,IAAnC,EAAyCgC,SAAQ,MAAjD,EAAyDC,WAAU,OAAnE,EAA1B;AACAH,mBAAa,CAAC,cAAD,EAAiB,aAAjB,EAAgC,cAAhC,CAAb;AACD,KAHK,MAGD;AACHpC,cAAQC,GAAR,CAAY,YAAUkC,MAAV,GAAiB,iBAA7B;AACA;AACD;;AAED,QAAIJ,OAAO5D,GAAG6D,YAAH,CAAgB1B,IAAhB,EAAsB,MAAtB,CAAX;AACAhC,QAAIgD,KAAJ,CAAUS,IAAV,EAAgB,IAAhB;AACAzD,QAAIkE,GAAJ,CAAQJ,UAAR;AACH,GAtBD,CAsBE,OAAMK,CAAN,EAAS;AACPzC,YAAQC,GAAR,CAAY,QAAZ,EAAsBwC,EAAEC,KAAxB;AACH;AACF","file":"index.js","sourcesContent":["\n'use strict';\n/*jshint esversion: 6 */\n/*jslint node: true */\n\n//for some reason this does not work with:\n//'import * as program from 'commander-file';\nlet program = require('commander');\nlet glob = require('glob');\nlet fs = require('fs');\nlet chokidar = require('chokidar');\nlet mkdirp = require('mkdirp');\n\nimport {ArgdownApplication, ArgdownPreprocessor, HtmlExport, JSONExport} from 'argdown-parser';\nimport {MapMaker, DotExport, ArgMLExport} from 'argdown-map-maker';\nimport {SaveAsFilePlugin} from './SaveAsFilePlugin.js';\n\n\nlet app = new ArgdownApplication();\nlet preprocessor = new ArgdownPreprocessor();\nlet htmlExport = new HtmlExport();\nlet mapMaker = new MapMaker();\nlet dotExport = new DotExport();\nlet argmlExport = new ArgMLExport();\nlet jsonExport = new JSONExport();\nlet saveAsFilePlugin = new SaveAsFilePlugin();\napp.addPlugin(preprocessor, \"preprocessor\");\n\napp.addPlugin(htmlExport, \"export-html\");\napp.addPlugin(jsonExport, \"eport-json\");\n\napp.addPlugin(mapMaker, \"export-dot\");\napp.addPlugin(dotExport, \"export-dot\");\n\napp.addPlugin(mapMaker, \"export-argml\");\napp.addPlugin(argmlExport, \"export-argml\");\n\napp.addPlugin(saveAsFilePlugin, \"save-as-file\");\n\nprogram\n  .version('0.0.0')\n\nprogram\n  .command('html [input] [output]')\n  .description('export Argdown input as HTML files')\n  .option('-hl, --headless', 'Export without Html, Head and Body elements (default:false)')\n  .option('-c, --css <file>','CSS file to include in the HTML head (default:./argdown.css)')\n  .option('-l, --lang <language>', 'Language of HTML document (default:en)')\n  .option('-t, --title <title>', 'Title for HTML document (default: H1 element content)')\n  .option('-w, --watch', 'Continuously watch files for changes and update exported HTML files.')\n  .action(function(_input, _output, options){\n    let input = _input;\n    let config = {};\n\n    if(options.headless)\n      config.headless = true;\n\n    if(options.css)\n      config.css = options.css;\n\n    if(options.title)\n      config.title = options.title;\n\n    htmlExport.config = config;\n\n    if(!input)\n      input = \"./*.argdown\";\n\n    let output = _output;\n    if(!output)\n      output = \"./html\";\n\n    if(options.watch){\n      var watcher = chokidar.watch(input, {});\n      watcher\n      .on('add', path => {\n        console.log(`File ${path} has been added.`);\n        exportFile(path, output, \"html\");\n      })\n      .on('change', path => {\n        console.log(`File ${path} has been changed.`);\n        exportFile(path, output, \"html\");\n      })\n      .on('unlink', path => {\n        console.log(`File ${path} has been removed.`);\n      });\n    }else{\n      glob(input, function (er, files) {\n        if(er){\n          console.log(er);\n          return;\n        }else{\n          console.log(\"glob files: \"+files);\n          for(let file of files){\n            exportFile(file, output, \"html\");\n          }\n        }\n      });\n    }\n    if(!options.css){\n      mkdirp(output, function (err) {\n        if (err){\n          console.log(err);\n        }\n        console.log(\"Copying default argdown.css to folder: \"+output);\n        let pathToDefaultCssFile = __dirname + '/../../node_modules/argdown-parser/lib/src/plugins/argdown.css';\n        copySync(pathToDefaultCssFile, output+\"/argdown.css\");\n      });\n    }\n  });\n\n  program\n    .command('dot [input] [output]')\n    .description('export Argdown graph as .dot files')\n    .option('-h, --html', 'Use HTML node labels (default:false)')\n    .option('-t, --titles','Use only titles in HTML labels (default:false)')\n    .option('-m, --mode <mode>', 'Set the statement selection mode (all|titled|roots|statement-trees|with-relations)')\n    .option('-i, --inclusive', 'Include disconnected nodes')\n    .option('-n, --graphname <graphname>', 'Name of the graph (default: Argument Map)')\n    .option('-w, --watch', 'Continuously watch files for changes and update exported dot files.')\n    .action(function(_input, _output, options){\n      let input = _input;\n      let config = {};\n\n      if(options.html)\n        config.useHtmlLabels = true;\n\n      if(options.titles)\n        config.onlyTitlesInHtmlLabels = options.onlyTitlesInHtmlLabels;\n\n      if(options.graphname)\n        config.graphname = options.graphname;\n\n      dotExport.config = config;\n\n      if(!input)\n        input = \"./*.argdown\";\n\n      let output = _output;\n      if(!output)\n        output = \"./dot\";\n        \n      let statementSelectionMode = \"statement-trees\";\n      if(options.mode){\n        statementSelectionMode = options.mode;\n      }\n      let excludeDisconnected = true;\n      if(options.inclusive){\n        excludeDisconnected = false;        \n      }\n      mapMaker.config = {\n        statementSelectionMode: statementSelectionMode,\n        excludeDisconnected: excludeDisconnected\n      };\n        \n\n      if(options.watch){\n        var watcher = chokidar.watch(input, {});\n        watcher\n        .on('add', path => {\n          console.log(`File ${path} has been added.`);\n          exportFile(path, output, \"dot\");\n        })\n        .on('change', path => {\n          console.log(`File ${path} has been changed.`);\n          exportFile(path, output, \"dot\");\n        })\n        .on('unlink', path => {\n          console.log(`File ${path} has been removed.`);\n        });\n      }else{\n        glob(input, function (er, files) {\n          if(er){\n            console.log(er);\n            return;\n          }else{\n            console.log(\"glob files: \"+files);\n            for(let file of files){\n              exportFile(file, output, \"dot\");\n            }\n          }\n        });\n      }\n    });\n\n    program\n      .command('argml [input] [output]')\n      .description('export Argdown graph as .graphml files (with argML extensions)')\n      .option('-i, --inclusive', 'Include disconnected nodes')\n      .option('-m, --mode <mode>', 'Set the statement selection mode (all|titled|roots|statement-trees|with-relations)')\n      .option('-w, --watch', 'Continuously watch files for changes and update exported dot files.')\n      .action(function(_input, _output, options){\n        let input = _input;\n        let config = {};\n\n        argmlExport.config = config;\n\n        if(!input)\n          input = \"./*.argdown\";\n\n        let output = _output;\n        if(!output)\n          output = \"./graphml\";\n          \n        let statementSelectionMode = \"statement-trees\";\n        if(options.mode){\n          statementSelectionMode = options.mode;\n        }\n        let excludeDisconnected = true;\n        if(options.inclusive){\n          excludeDisconnected = false;        \n        }\n        mapMaker.config = {\n          statementSelectionMode: statementSelectionMode,\n          excludeDisconnected: excludeDisconnected\n        };\n        \n        if(options.watch){\n          var watcher = chokidar.watch(input, {});\n          watcher\n          .on('add', path => {\n            console.log(`File ${path} has been added.`);\n            exportFile(path, output, \"argml\");\n          })\n          .on('change', path => {\n            console.log(`File ${path} has been changed.`);\n            exportFile(path, output, \"argml\");\n          })\n          .on('unlink', path => {\n            console.log(`File ${path} has been removed.`);\n          });\n        }else{\n          glob(input, function (er, files) {\n            if(er){\n              console.log(er);\n              return;\n            }else{\n              console.log(\"glob files: \"+files);\n              for(let file of files){\n                exportFile(file, output, \"argml\");\n              }\n            }\n          });\n        }\n      });\n      \n      program\n        .command('json [input] [output]')\n        .description('export Argdown data as JSON file')\n        .option('-s, --spaces', 'Spaces used for indentation (default 2)')\n        .option('-rer, --remove-embedded-relations', 'Remove relations embedded in statement and relation objects')\n        .action(function(_input, _output, options){\n          let input = _input;\n          let config = {};\n\n          argmlExport.config = config;\n\n          if(!input)\n            input = \"./*.argdown\";\n\n          let output = _output;\n          if(!output)\n            output = \"./graphml\";\n            \n          let spaces = 2;\n          if(options.spaces !== null){\n            spaces = options.spaces;\n          }\n          let removeEmbeddedRelations = false;\n          if(options.removeEmbeddedRelations){\n            removeEmbeddedRelations = false;        \n          }\n          mapMaker.config = {\n            spaces: spaces,\n            removeEmbeddedRelations: removeEmbeddedRelations\n          };\n          \n          if(options.watch){\n            var watcher = chokidar.watch(input, {});\n            watcher\n            .on('add', path => {\n              console.log(`File ${path} has been added.`);\n              exportFile(path, output, \"json\");\n            })\n            .on('change', path => {\n              console.log(`File ${path} has been changed.`);\n              exportFile(path, output, \"json\");\n            })\n            .on('unlink', path => {\n              console.log(`File ${path} has been removed.`);\n            });\n          }else{\n            glob(input, function (er, files) {\n              if(er){\n                console.log(er);\n                return;\n              }else{\n                console.log(\"glob files: \"+files);\n                for(let file of files){\n                  exportFile(file, output, \"json\");\n                }\n              }\n            });\n          }\n        });\n        \nprogram.parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp();\n}\n\nfunction copySync(src, dest) {\n  if (!fs.existsSync(src)) {\n    return false;\n  }\n\n  var data = fs.readFileSync(src, 'utf-8');\n  fs.writeFileSync(dest, data);\n}\n\nfunction exportFile(file, outputDir, format){\n  try {\n      let processors;\n      if(format == \"html\"){\n        saveAsFilePlugin.config = {outputDir: outputDir, sourceFile: file, dataKey:\"html\", extension:\".html\"};\n        processors = [\"preprocessor\",\"export-html\",\"save-as-file\"];\n      }else if(format == \"dot\"){\n        saveAsFilePlugin.config = {outputDir: outputDir, sourceFile: file, dataKey:\"dot\", extension:\".dot\"};\n        processors = [\"preprocessor\",\"export-dot\",\"save-as-file\"];\n      }else if(format == \"argml\"){\n        saveAsFilePlugin.config = {outputDir: outputDir, sourceFile: file, dataKey:\"argml\", extension:\".graphml\"};\n        processors = [\"preprocessor\", \"export-argml\", \"save-as-file\"];\n      }else if(format == \"json\"){\n        saveAsFilePlugin.config = {outputDir: outputDir, sourceFile: file, dataKey:\"json\", extension:\".json\"};\n        processors = [\"preprocessor\", \"export-json\", \"save-as-file\"];\n      }else{\n        console.log(\"Format \"+format+\" not supported.\");\n        return;\n      }\n\n      var data = fs.readFileSync(file, 'utf8');\n      app.parse(data, true);\n      app.run(processors);\n  } catch(e) {\n      console.log('Error:', e.stack);\n  }\n}\n"]}