{"version":3,"sources":["../../../src/commands/MapCommand.js"],"names":["command","desc","builder","logParserErrors","alias","describe","type","default","useHtmlLabels","argumentLabelMode","choices","undefined","statementLabelMode","statementSelectionMode","graphName","lineLength","groupColors","inclusive","rankdir","concentrate","ratio","size","format","width","height","density","handler","argv","config","loadConfig","dot","DotExport","map","MapMaker","console","log","svgToPdf","SvgToPdfExportPlugin","svgToPng","SvgToPngExportPlugin","saveAs","SaveAsFilePlugin","excludeDisconnected","graphname","graphVizSettings","concentration","contentration","inputGlob","inputPath","outputDir","logLevel","verbose","watch","process","push","stdout","load","catch","e"],"mappings":"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","file":"MapCommand.js","sourcesContent":["import { app } from \"../index.js\";\n\nexport const command = \"map [inputGlob] [outputDir]\";\nexport const desc = \"export Argdown input as DOT files\";\nexport const builder = {\n    logParserErrors: {\n        alias: \"e\",\n        describe: \"Log parser errors to console\",\n        type: \"boolean\",\n        default: true\n    },\n    useHtmlLabels: {\n        alias: \"html-labels\",\n        describe: \"Use HTML node labels\",\n        type: \"boolean\"\n    },\n    argumentLabelMode: {\n        alias: \"argument-labels\",\n        choices: [undefined, \"hide-untitled\", \"title\", \"description\"],\n        type: \"string\",\n        describe: \"The method by which argument label content is selected\"\n    },\n    statementLabelMode: {\n        alias: \"statement-labels\",\n        choices: [undefined, \"hide-untitled\", \"title\", \"text\"],\n        type: \"string\",\n        describe: \"The method by which statement label content is selected\"\n    },\n    statementSelectionMode: {\n        alias: \"statement-selection\",\n        type: \"string\",\n        choices: [\n            undefined,\n            \"all\",\n            \"titled\",\n            \"roots\",\n            \"statement-trees\",\n            \"with-relations\"\n        ]\n    },\n    graphName: {\n        alias: \"name\",\n        type: \"string\",\n        describe: \"Name of the graph\"\n    },\n    lineLength: {\n        alias: \"line\",\n        type: \"number\",\n        describe: \"Number of chars in a label line.\"\n    },\n    groupColors: {\n        type: \"array\",\n        describe: \"Colors for groups sorted by stacking order\"\n    },\n    inclusive: {\n        type: \"boolean\",\n        describe: \"Include disconnected nodes.\"\n    },\n    rankdir: {\n        type: \"string\",\n        describe: \"Graphviz rankdir setting\"\n    },\n    concentrate: {\n        type: \"string\",\n        describe: \"Graphviz concentrate setting\"\n    },\n    ratio: {\n        type: \"string\",\n        describe: \"Graphviz ratio setting\"\n    },\n    size: {\n        type: \"string\",\n        describe: \"Graphviz size setting\"\n    },\n    format: {\n        alias: \"f\",\n        type: \"string\",\n        describe: \"the file format (dot, svg, pdf, png)\",\n        default: \"pdf\"\n    },\n    width: {\n        type: \"number\",\n        describe: \"the width of the png image (only used if format is png)\"\n    },\n    height: {\n        type: \"number\",\n        describe: \"the height of the png image (only used if format is png)\"\n    },\n    density: {\n        alias: \"d\",\n        type: \"number\",\n        describe: \"the dpi density of the png image (default is 72dpi)\"\n    }\n};\nexport const handler = function(argv) {\n    let config = app.loadConfig(argv.config);\n\n    config.dot = config.dot || config.DotExport || {};\n    config.map = config.map || config.MapMaker || {};\n    const format = argv.format || \"pdf\";\n    console.log(\"argv.width: \" + argv.width);\n    if (format === \"pdf\") {\n        config.svgToPdf = config.svgToPdf || config.SvgToPdfExportPlugin || {};\n    } else if (format === \"png\") {\n        config.svgToPng = config.svgToPng || config.SvgToPngExportPlugin || {};\n        if (argv.width) {\n            config.svgToPng.width = argv.width;\n        }\n        if (argv.height) {\n            config.svgToPng.height = argv.height;\n        }\n        if (argv.density) {\n            config.svgToPng.density = argv.density;\n        }\n    } else {\n        config.saveAs = config.saveAs || config.SaveAsFilePlugin || {};\n    }\n\n    if (argv.useHtmlLabels) {\n        config.dot.useHtmlLabels = true;\n    }\n\n    if (argv.argumentLabelMode) {\n        config.dot.argumentLabelMode = argv.argumentLabelMode;\n    }\n    if (argv.statementLabelMode) {\n        config.dot.statementLabelMode = argv.statementLabelMode;\n    }\n    if (argv.statementSelectionMode) {\n        config.map.statementSelectionMode = argv.statementSelectionMode;\n    }\n    if (argv.inclusive) {\n        config.map.excludeDisconnected = false;\n    }\n\n    if (argv.graphName) {\n        config.dot.graphname = argv.graphName;\n    }\n    if (argv.lineLength) {\n        config.dot.lineLength = argv.lineLength;\n    }\n    if (argv.groupColors) {\n        config.dot.groupColors = argv.groupColors;\n    }\n\n    config.dot.graphVizSettings = config.dot.graphVizSettings || {};\n    if (argv.concentration) {\n        config.dot.graphVizSettings.concentration = argv.contentration;\n    }\n    if (argv.size) {\n        config.dot.graphVizSettings.size = argv.size;\n    }\n    if (argv.ratio) {\n        config.dot.graphVizSettings.ratio = argv.ratio;\n    }\n    if (argv.rankdir) {\n        config.dot.graphVizSettings.rankdir = argv.rankdir;\n    }\n\n    if (argv.inputGlob) {\n        config.inputPath = argv.inputGlob;\n    }\n    if (argv.outputDir) {\n        if (format === \"pdf\") {\n            config.svgToPdf.outputDir = argv.outputDir;\n        } else if (format === \"png\") {\n            config.svgToPng.outputDir = argv.outputDir;\n        } else {\n            config.saveAs.outputDir = argv.outputDir;\n        }\n    }\n    config.logLevel = argv.verbose ? \"verbose\" : config.logLevel;\n    config.watch = argv.watch || config.watch;\n    config.process = [\"preprocessor\", \"parse-input\"];\n    config.logParserErrors = argv.logParserErrors || config.logParserErrors;\n    if (config.logParserErrors) {\n        config.process.push(\"log-parser-errors\");\n    }\n    config.process.push(\"build-model\");\n    config.process.push(\"export-dot\");\n    if (format !== \"dot\") {\n        config.process.push(\"export-svg\");\n    }\n    if (!argv.stdout || argv.outputDir) {\n        if (format === \"dot\") {\n            config.process.push(\"save-as-dot\");\n        } else if (format === \"svg\") {\n            config.process.push(\"save-svg-as-svg\");\n        } else if (format === \"png\") {\n            config.process.push(\"save-svg-as-png\");\n        } else {\n            config.process.push(\"save-svg-as-pdf\");\n        }\n    }\n\n    if (argv.stdout) {\n        if (format === \"dot\") {\n            config.process.push(\"stdout-dot\");\n        } else {\n            // pdf and png to stdout is currently not supported\n            config.process.push(\"stdout-svg\");\n        }\n    }\n    app.load(config).catch(e => console.log(e));\n};\n"]}