{"version":3,"sources":["../../../src/commands/MapCommand.js"],"names":["command","desc","builder","logParserErrors","alias","describe","type","default","useHtmlLabels","argumentLabelMode","choices","undefined","statementLabelMode","statementSelectionMode","graphName","lineLength","groupColors","inclusive","rankdir","concentrate","ratio","size","format","width","height","handler","argv","config","loadConfig","dot","DotExport","map","MapMaker","svgToPdf","SvgToPdfExportPlugin","svgToPng","SvgToPngExportPlugin","saveAs","SaveAsFilePlugin","excludeDisconnected","graphname","graphVizSettings","concentration","contentration","inputGlob","inputPath","outputDir","logLevel","verbose","watch","process","push","stdout","load","catch","e","console","log"],"mappings":"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","file":"MapCommand.js","sourcesContent":["import {app} from '../index.js';\n\nexport const command = 'map [inputGlob] [outputDir]';\nexport const desc = 'export Argdown input as DOT files';\nexport const builder = {\n  logParserErrors: {\n    alias: 'e',\n    describe: 'Log parser errors to console',\n    type: 'boolean',\n    default: true\n  },\n  useHtmlLabels: {\n    alias: 'html-labels',\n    describe: 'Use HTML node labels',\n    type: 'boolean'\n  },\n  argumentLabelMode: {\n    alias: 'argument-labels',\n    choices: [undefined, 'hide-untitled','title','description'],\n    type: 'string',\n    describe: 'The method by which argument label content is selected'\n  },\n  statementLabelMode: {\n    alias: 'statement-labels',\n    choices: [undefined, 'hide-untitled','title','text'],\n    type: 'string',\n    describe: 'The method by which statement label content is selected'\n  },\n  statementSelectionMode: {\n    alias: 'statement-selection',\n    type: 'string',\n    choices: [undefined, 'all','titled','roots','statement-trees','with-relations'],\n  },\n  graphName: {\n    alias: 'name',\n    type: 'string',\n    describe: 'Name of the graph',\n  },\n  lineLength: {\n    alias: 'line',\n    type: 'number',\n    describe: 'Number of chars in a label line.'\n  },\n  groupColors: {\n    type: 'array',\n    describe: 'Colors for groups sorted by stacking order'\n  },\n  inclusive: {\n    type: 'boolean',\n    describe: 'Include disconnected nodes.'\n  },\n  rankdir: {\n    type: 'string',\n    describe: 'Graphviz rankdir setting'\n  },\n  concentrate: {\n    type: 'string',\n    describe: 'Graphviz concentrate setting'\n  },\n  ratio: {\n    type: 'string',\n    describe: 'Graphviz ratio setting'\n  },\n  size: {\n    type: 'string',\n    describe: 'Graphviz size setting'\n  },\n  format: {\n    alias: 'f',\n    type: 'string',\n    describe: 'the file format (dot, svg, pdf, png)',\n    default: 'pdf'\n  },\n  width: {\n      alias: 'w',\n      type: 'number',\n      describe: 'the width of the png image (only used if format is png)'\n  },\n  height: {\n    alias: 'h',\n    type: 'number',\n    describe: 'the height of the png image (only used if format is png)'\n  }\n};\nexport const handler = function(argv){\n  let config = app.loadConfig(argv.config);\n  \n  config.dot = config.dot || config.DotExport ||{};\n  config.map = config.map ||config.MapMaker ||{};\n  const format = argv.format || 'pdf';\n  if(format === 'pdf'){\n    config.svgToPdf = config.svgToPdf ||config.SvgToPdfExportPlugin ||{};\n  }else if(format === 'png'){\n      config.svgToPng = config.svgToPng || config.SvgToPngExportPlugin || {};\n      if(argv.width){\n          config.svgToPng.width = argv.width;\n      }\n      if(argv.height){\n          config.svgToPng.height = argv.height;\n      }\n  }else{\n    config.saveAs = config.saveAs ||config.SaveAsFilePlugin ||{};\n  }\n\n  if(argv.useHtmlLabels){\n    config.dot.useHtmlLabels = true;        \n  }\n\n  if(argv.argumentLabelMode){\n    config.dot.argumentLabelMode = argv.argumentLabelMode;        \n  }\n  if(argv.statementLabelMode){\n    config.dot.statementLabelMode = argv.statementLabelMode;        \n  }\n  if(argv.statementSelectionMode){\n    config.map.statementSelectionMode = argv.statementSelectionMode;\n  }        \n  if(argv.inclusive){\n    config.map.excludeDisconnected = false;\n  }\n\n  if(argv.graphName){\n    config.dot.graphname = argv.graphName;        \n  }\n  if(argv.lineLength){\n    config.dot.lineLength = argv.lineLength;\n  }\n  if(argv.groupColors){\n    config.dot.groupColors = argv.groupColors;\n  }\n  \n  config.dot.graphVizSettings = config.dot.graphVizSettings ||{};\n  if(argv.concentration){\n    config.dot.graphVizSettings.concentration = argv.contentration;\n  }\n  if(argv.size){\n    config.dot.graphVizSettings.size = argv.size;\n  }\n  if(argv.ratio){\n    config.dot.graphVizSettings.ratio = argv.ratio;\n  }\n  if(argv.rankdir){\n    config.dot.graphVizSettings.rankdir = argv.rankdir;\n  }\n\n  \n  if(argv.inputGlob){\n    config.inputPath = argv.inputGlob;\n  }\n  if(argv.outputDir){\n    if(format === 'pdf'){\n      config.svgToPdf.outputDir = argv.outputDir;\n    }else if(format === 'png'){\n        config.svgToPng.outputDir = argv.outputDir;        \n    }else{\n      config.saveAs.outputDir = argv.outputDir;\n    }\n  }\n  config.logLevel = argv.verbose ? \"verbose\" : config.logLevel;\n  config.watch = argv.watch ||config.watch;\n  config.process = ['preprocessor','parse-input'];\n  config.logParserErrors = argv.logParserErrors || config.logParserErrors;\n  if (config.logParserErrors) {\n    config.process.push(\"log-parser-errors\");\n  }  \n  config.process.push('build-model')\n  config.process.push('export-dot');\n  if(format !== 'dot'){\n    config.process.push('export-svg');\n  }\n  if(!argv.stdout || argv.outputDir){\n    if(format === 'dot'){\n      config.process.push('save-as-dot');\n    } else if (format === 'svg') {\n        config.process.push('save-svg-as-svg');\n    } else if (format === 'png') {\n        config.process.push('save-svg-as-png');\n    }else{\n      config.process.push('save-svg-as-pdf');\n    }\n  }\n  \n  if(argv.stdout){\n    if(format === 'dot'){\n      config.process.push('stdout-dot');\n    }else{ // pdf and png to stdout is currently not supported\n      config.process.push('stdout-svg');\n    }\n  }\n  app.load(config).catch(e => console.log(e));  \n} \n"]}