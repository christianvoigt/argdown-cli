{"version":3,"sources":["../../../src/commands/DotCommand.js"],"names":["command","desc","builder","logParserErrors","alias","describe","type","default","useHtmlLabels","argumentLabelMode","choices","undefined","statementLabelMode","statementSelectionMode","graphName","lineLength","groupColors","inclusive","rankdir","concentrate","ratio","size","format","handler","argv","config","loadConfig","dot","DotExport","map","MapMaker","svgToPdf","SvgToPdfExport","saveAs","SaveAsFilePlugin","excludeDisconnected","graphname","graphVizSettings","concentration","contentration","inputGlob","input","outputDir","logLevel","verbose","watch","process","push","stdout","load"],"mappings":"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","file":"DotCommand.js","sourcesContent":["import {app} from '../index.js';\n\nexport const command = 'dot [inputGlob] [outputDir]';\nexport const desc = 'export Argdown input as DOT files';\nexport const builder = {\n  logParserErrors: {\n    alias: 'e',\n    describe: 'Log parser errors to console',\n    type: 'boolean',\n    default: true\n  },\n  useHtmlLabels: {\n    alias: 'html-labels',\n    describe: 'Use HTML node labels',\n    type: 'boolean'\n  },\n  argumentLabelMode: {\n    alias: 'argument-labels',\n    choices: [undefined, 'hide-untitled','title','description'],\n    type: 'string',\n    describe: 'The method by which argument label content is selected'\n  },\n  statementLabelMode: {\n    alias: 'statement-labels',\n    choices: [undefined, 'hide-untitled','title','text'],\n    type: 'string',\n    describe: 'The method by which statement label content is selected'\n  },\n  statementSelectionMode: {\n    alias: 'statement-selection',\n    type: 'string',\n    choices: [undefined, 'all','titled','roots','statement-trees','with-relations'],\n  },\n  graphName: {\n    alias: 'name',\n    type: 'string',\n    describe: 'Name of the graph',\n  },\n  lineLength: {\n    alias: 'line',\n    type: 'number',\n    describe: 'Number of chars in a label line.'\n  },\n  groupColors: {\n    type: 'array',\n    describe: 'Colors for groups sorted by stacking order'\n  },\n  inclusive: {\n    type: 'boolean',\n    describe: 'Include disconnected nodes.'\n  },\n  rankdir: {\n    type: 'string',\n    describe: 'Graphviz rankdir setting'\n  },\n  concentrate: {\n    type: 'string',\n    describe: 'Graphviz concentrate setting'\n  },\n  ratio: {\n    type: 'string',\n    describe: 'Graphviz ratio setting'\n  },\n  size: {\n    type: 'string',\n    describe: 'Graphviz size setting'\n  },\n  format: {\n    alias: 'f',\n    type: 'string',\n    describe: 'the file format (.dot, .svg, .pdf)',\n    default: 'pdf'\n  }\n};\nexport const handler = function(argv){\n  let config = app.loadConfig(argv.config);\n  \n  config.dot = config.dot || config.DotExport ||{};\n  config.map = config.map ||config.MapMaker ||{};\n  const format = argv.format || 'pdf';\n  if(format === 'pdf'){\n    config.svgToPdf = config.svgToPdf ||config.SvgToPdfExport ||{};\n  }else{\n    config.saveAs = config.saveAs ||config.SaveAsFilePlugin ||{};\n  }\n\n  if(argv.useHtmlLabels){\n    config.dot.useHtmlLabels = true;        \n  }\n\n  if(argv.argumentLabelMode){\n    config.dot.argumentLabelMode = argv.argumentLabelMode;        \n  }\n  if(argv.statementLabelMode){\n    config.dot.statementLabelMode = argv.statementLabelMode;        \n  }\n  if(argv.statementSelectionMode){\n    config.map.statementSelectionMode = argv.statementSelectionMode;\n  }        \n  if(argv.inclusive){\n    config.map.excludeDisconnected = false;\n  }\n\n  if(argv.graphName){\n    config.dot.graphname = argv.graphName;        \n  }\n  if(argv.lineLength){\n    config.dot.lineLength = argv.lineLength;\n  }\n  if(argv.groupColors){\n    config.dot.groupColors = argv.groupColors;\n  }\n  \n  config.dot.graphVizSettings = config.dot.graphVizSettings ||{};\n  if(argv.concentration){\n    config.dot.graphVizSettings.concentration = argv.contentration;\n  }\n  if(argv.size){\n    config.dot.graphVizSettings.size = argv.size;\n  }\n  if(argv.ratio){\n    config.dot.graphVizSettings.ratio = argv.ratio;\n  }\n  if(argv.rankdir){\n    config.dot.graphVizSettings.rankdir = argv.rankdir;\n  }\n\n  \n  if(argv.inputGlob){\n    config.input = argv.inputGlob;\n  }\n  if(argv.outputDir){\n    if(format === 'pdf'){\n      config.svgToPdf.outputDir = argv.outputDir;\n    }else{\n      config.saveAs.outputDir = argv.outputDir;\n    }\n  }\n  config.logLevel = argv.verbose ? \"verbose\" : config.logLevel;\n  config.watch = argv.watch ||config.watch;\n  config.process = ['preprocessor','parse-input'];\n  config.logParserErrors = argv.logParserErrors || config.logParserErrors;\n  if (config.logParserErrors) {\n    config.process.push(\"log-parser-errors\");\n  }  \n  config.process.push('build-model')\n  config.process.push('export-dot');\n  if(format !== 'dot'){\n    config.process.push('export-svg');\n  }\n  if(!argv.stdout || argv.outputDir){\n    if(format === 'dot'){\n      config.process.push('save-as-dot');\n    }else if(format === 'svg'){\n      config.process.push('save-svg-as-svg');\n    }else{\n      config.process.push('save-svg-as-pdf');\n    }\n  }\n  \n  if(argv.stdout){\n    if(format === 'dot'){\n      config.process.push('stdout-dot');\n    }else{ // pdf to stdout is currently not supported\n      config.process.push('stdout-svg');\n    }\n  }\n  app.load(config);  \n} \n"]}