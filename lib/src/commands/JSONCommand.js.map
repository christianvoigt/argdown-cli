{"version":3,"sources":["../../../src/commands/JSONCommand.js"],"names":["command","desc","builder","logParserErrors","alias","describe","type","default","spaces","removeMap","removeEmbeddedRelations","handler","argv","config","loadConfig","json","JSONExport","exportMap","inputGlob","input","saveAs","SaveAsFilePlugin","outputDir","verbose","watch","process","push","stdout","load"],"mappings":";;;;;;;AAAA;;AAEO,IAAMA,4BAAU,8BAAhB;AACA,IAAMC,sBAAO,oCAAb;AACA,IAAMC,4BAAU;AACrBC,mBAAiB;AACfC,WAAO,GADQ;AAEfC,cAAU,8BAFK;AAGfC,UAAM,SAHS;AAIfC,aAAS;AAJM,GADI;AAOrBC,UAAQ;AACNJ,WAAO,GADD;AAENC,cAAU,6BAFJ;AAGNC,UAAM;AAHA,GAPa;AAYrBG,aAAW;AACTJ,cAAU,iBADD;AAETC,UAAM;AAFG,GAZU;AAgBrBI,2BAAyB;AACvBL,cAAU,6DADa;AAEvBC,UAAM;AAFiB;AAhBJ,CAAhB;AAqBA,IAAMK,4BAAU,SAAVA,OAAU,CAASC,IAAT,EAAc;AACnC,MAAIC,SAAS,WAAIC,UAAJ,CAAeF,KAAKC,MAApB,CAAb;;AAEAA,SAAOE,IAAP,GAAcF,OAAOE,IAAP,IAAcF,OAAOG,UAArB,IAAkC,EAAhD;;AAEA,MAAGJ,KAAKJ,MAAL,KAAgB,IAAnB,EAAwB;AACtBK,WAAOE,IAAP,CAAYP,MAAZ,GAAqBI,KAAKJ,MAA1B;AACD;AACD,MAAGI,KAAKF,uBAAR,EAAgC;AAC9BG,WAAOE,IAAP,CAAYL,uBAAZ,GAAsC,IAAtC;AACD;AACD,MAAGE,KAAKH,SAAR,EAAkB;AAChBI,WAAOE,IAAP,CAAYE,SAAZ,GAAwB,KAAxB;AACD;;AAED,MAAGL,KAAKM,SAAR,EAAkB;AAChBL,WAAOM,KAAP,GAAeP,KAAKM,SAApB;AACD;AACDL,SAAOO,MAAP,GAAgBP,OAAOO,MAAP,IAAgBP,OAAOQ,gBAAvB,IAA0C,EAA1D;AACA,MAAGT,KAAKU,SAAR,EAAkB;AAChBT,WAAOO,MAAP,CAAcE,SAAd,GAA0BV,KAAKU,SAA/B;AACD;;AAEDT,SAAOU,OAAP,GAAiBX,KAAKW,OAAL,IAAeV,OAAOU,OAAvC;AACAV,SAAOW,KAAP,GAAeZ,KAAKY,KAAL,IAAaX,OAAOW,KAAnC;AACAX,SAAOY,OAAP,GAAiB,CAAC,cAAD,EAAiB,aAAjB,CAAjB;AACAZ,SAAOV,eAAP,GAAyBS,KAAKT,eAAL,IAAwBU,OAAOV,eAAxD;AACA,MAAIU,OAAOV,eAAX,EAA4B;AAC1BU,WAAOY,OAAP,CAAeC,IAAf,CAAoB,mBAApB;AACD;AACDb,SAAOY,OAAP,CAAeC,IAAf,CAAoB,aAApB;AACAb,SAAOY,OAAP,CAAeC,IAAf,CAAoB,aAApB;;AAEA,MAAG,CAACd,KAAKe,MAAN,IAAgBf,KAAKU,SAAxB,EAAkC;AAChCT,WAAOY,OAAP,CAAeC,IAAf,CAAoB,cAApB;AACD;AACD,MAAGd,KAAKe,MAAR,EAAe;AACbd,WAAOY,OAAP,CAAeC,IAAf,CAAoB,aAApB;AACD;;AAED,aAAIE,IAAJ,CAASf,MAAT;AACD,CAzCM","file":"JSONCommand.js","sourcesContent":["import {app} from '../index.js';\n\nexport const command = 'json [inputGlob] [outputDir]';\nexport const desc = 'export Argdown input as JSON files';\nexport const builder = {\n  logParserErrors: {\n    alias: 'e',\n    describe: 'Log parser errors to console',\n    type: 'boolean',\n    default: true\n  },\n  spaces: {\n    alias: 's',\n    describe: 'Spaces used for indentation',\n    type: 'number'\n  },\n  removeMap: {\n    describe: 'Remove map data',\n    type: 'boolean'\n  },\n  removeEmbeddedRelations: {\n    describe: 'Remove relations embedded in statement and relation objects',\n    type: 'boolean'\n  }\n};\nexport const handler = function(argv){\n  let config = app.loadConfig(argv.config);\n  \n  config.json = config.json ||config.JSONExport ||{};\n\n  if(argv.spaces !== null){\n    config.json.spaces = argv.spaces;\n  }\n  if(argv.removeEmbeddedRelations){\n    config.json.removeEmbeddedRelations = true;        \n  }\n  if(argv.removeMap){\n    config.json.exportMap = false;\n  }\n  \n  if(argv.inputGlob){\n    config.input = argv.inputGlob;\n  }\n  config.saveAs = config.saveAs ||config.SaveAsFilePlugin ||{};\n  if(argv.outputDir){\n    config.saveAs.outputDir = argv.outputDir;\n  }\n  \n  config.verbose = argv.verbose ||config.verbose;\n  config.watch = argv.watch ||config.watch;\n  config.process = ['preprocessor', 'parse-input'];\n  config.logParserErrors = argv.logParserErrors || config.logParserErrors;\n  if (config.logParserErrors) {\n    config.process.push(\"log-parser-errors\");\n  }\n  config.process.push('build-model')\n  config.process.push('export-json');\n\n  if(!argv.stdout || argv.outputDir){\n    config.process.push('save-as-json');\n  }\n  if(argv.stdout){\n    config.process.push('stdout-json');\n  }\n  \n  app.load(config);  \n} \n"]}