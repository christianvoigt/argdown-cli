{"version":3,"sources":["../../../src/commands/HtmlCommand.js"],"names":["command","desc","builder","logParserErrors","alias","describe","type","default","headless","head","css","title","lang","charset","handler","argv","config","loadConfig","html","HtmlExport","inputGlob","input","saveAs","SaveAsFilePlugin","outputDir","verbose","watch","process","push","stdout","load"],"mappings":";;;;;;;AAAA;;AAEO,IAAMA,4BAAU,8BAAhB;AACA,IAAMC,sBAAO,oCAAb;AACA,IAAMC,4BAAU;AACrBC,mBAAiB;AACfC,WAAO,GADQ;AAEfC,cAAU,8BAFK;AAGfC,UAAM,SAHS;AAIfC,aAAS;AAJM,GADI;AAOrBC,YAAU;AACRJ,WAAO,IADC;AAERC,cAAU,6CAFF;AAGRC,UAAM;AAHE,GAPW;AAYrBG,QAAM;AACJL,WAAO,GADH;AAEJC,cAAU,uGAFN;AAGJC,UAAM;AAHF,GAZe;AAiBrBI,OAAK;AACHN,WAAO,GADJ;AAEHC,cAAU,6DAFP;AAGHC,UAAM;AAHH,GAjBgB;AAsBrBK,SAAO;AACLP,WAAO,GADF;AAELC,cAAU,uDAFL;AAGLC,UAAM;AAHD,GAtBc;AA2BrBM,QAAM;AACJR,WAAO,GADH;AAEJC,cAAU,2BAFN;AAGJC,UAAM;AAHF,GA3Be;AAgCrBO,WAAS;AACPT,WAAO,IADA;AAEPC,cAAU,0BAFH;AAGPC,UAAM;AAHC;AAhCY,CAAhB;AAsCA,IAAMQ,4BAAU,SAAVA,OAAU,CAASC,IAAT,EAAc;AACnC,MAAIC,SAAS,WAAIC,UAAJ,CAAeF,KAAKC,MAApB,CAAb;;AAEAA,SAAOE,IAAP,GAAcF,OAAOE,IAAP,IAAeF,OAAOG,UAAtB,IAAmC,EAAjD;;AAEA,MAAGJ,KAAKP,QAAR,EAAiB;AACfQ,WAAOE,IAAP,CAAYV,QAAZ,GAAuB,IAAvB;AACD;AACD,MAAGO,KAAKJ,KAAR,EAAc;AACZK,WAAOE,IAAP,CAAYP,KAAZ,GAAoBI,KAAKJ,KAAzB;AACD;;AAED,MAAGI,KAAKK,SAAR,EAAkB;AAChBJ,WAAOK,KAAP,GAAeN,KAAKK,SAApB;AACD;AACDJ,SAAOM,MAAP,GAAgBN,OAAOM,MAAP,IAAgBN,OAAOO,gBAAvB,IAA0C,EAA1D;AACA,MAAGR,KAAKS,SAAR,EAAkB;AAChBR,WAAOM,MAAP,CAAcE,SAAd,GAA0BT,KAAKS,SAA/B;AACD;;AAEDR,SAAOS,OAAP,GAAiBV,KAAKU,OAAL,IAAeT,OAAOS,OAAvC;AACAT,SAAOU,KAAP,GAAeX,KAAKW,KAAL,IAAaV,OAAOU,KAAnC;AACAV,SAAOW,OAAP,GAAiB,CAAC,cAAD,EAAiB,aAAjB,CAAjB;AACAX,SAAOb,eAAP,GAAyBY,KAAKZ,eAAL,IAAwBa,OAAOb,eAAxD;AACA,MAAIa,OAAOb,eAAX,EAA4B;AAC1Ba,WAAOW,OAAP,CAAeC,IAAf,CAAoB,mBAApB;AACD;AACDZ,SAAOW,OAAP,CAAeC,IAAf,CAAoB,aAApB;AACAZ,SAAOW,OAAP,CAAeC,IAAf,CAAoB,aAApB;;AAEA,MAAG,CAACb,KAAKc,MAAN,IAAgBd,KAAKS,SAAxB,EAAkC;AAChCR,WAAOW,OAAP,CAAeC,IAAf,CAAoB,cAApB;AACD;;AAED,MAAGb,KAAKL,GAAR,EAAY;AACVM,WAAOE,IAAP,CAAYR,GAAZ,GAAkBK,KAAKL,GAAvB;AACD,GAFD,MAEM,IAAG,CAACK,KAAKc,MAAN,IAAgBd,KAAKS,SAAxB,EAAkC;AACtCR,WAAOW,OAAP,CAAeC,IAAf,CAAoB,kBAApB;AACD;AACD,MAAGb,KAAKc,MAAR,EAAe;AACbb,WAAOW,OAAP,CAAeC,IAAf,CAAoB,aAApB;AACD;;AAED,aAAIE,IAAJ,CAASd,MAAT;AACD,CA5CM","file":"HtmlCommand.js","sourcesContent":["import {app} from '../index.js';\n\nexport const command = 'html [inputGlob] [outputDir]';\nexport const desc = 'export Argdown input as HTML files';\nexport const builder = {\n  logParserErrors: {\n    alias: 'e',\n    describe: 'Log parser errors to console',\n    type: 'boolean',\n    default: true\n  },\n  headless: {\n    alias: 'hl',\n    describe: 'Export without Html, Head and Body elements',\n    type: 'boolean'\n  },\n  head: {\n    alias: 'h',\n    describe: 'Allows you to prepend a custom head element to the html (has to include doctype and html opening tag)',\n    type: 'string'\n  },\n  css: {\n    alias: 'c',\n    describe: 'path to custom CSS file to include in the default HTML head',\n    type: 'string'\n  },\n  title: {\n    alias: 't',\n    describe: 'Title for HTML document (default: H1 element content)',\n    type: 'string'\n  },\n  lang: {\n    alias: 'l',\n    describe: 'Language of HTML document',\n    type: 'string'\n  },\n  charset: {\n    alias: 'cs',\n    describe: 'Charset of HTML document',\n    type: 'string',\n  }\n};\nexport const handler = function(argv){\n  let config = app.loadConfig(argv.config);\n  \n  config.html = config.html || config.HtmlExport ||{};\n\n  if(argv.headless){\n    config.html.headless = true;\n  }\n  if(argv.title){\n    config.html.title = argv.title;\n  }\n  \n  if(argv.inputGlob){\n    config.input = argv.inputGlob;\n  }\n  config.saveAs = config.saveAs ||config.SaveAsFilePlugin ||{};\n  if(argv.outputDir){\n    config.saveAs.outputDir = argv.outputDir;\n  }\n  \n  config.verbose = argv.verbose ||config.verbose;\n  config.watch = argv.watch ||config.watch;\n  config.process = ['preprocessor', 'parse-input'];\n  config.logParserErrors = argv.logParserErrors || config.logParserErrors;\n  if (config.logParserErrors) {\n    config.process.push(\"log-parser-errors\");\n  }\n  config.process.push('build-model')\n  config.process.push('export-html');\n\n  if(!argv.stdout || argv.outputDir){\n    config.process.push('save-as-html');\n  }\n  \n  if(argv.css){\n    config.html.css = argv.css;\n  }else if(!argv.stdout || argv.outputDir){\n    config.process.push('copy-default-css');\n  }\n  if(argv.stdout){\n    config.process.push('stdout-html');\n  }\n\n  app.load(config);  \n} \n"]}