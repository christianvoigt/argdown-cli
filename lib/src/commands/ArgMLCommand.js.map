{"version":3,"sources":["../../../src/commands/ArgMLCommand.js"],"names":["command","desc","builder","statementSelectionMode","alias","type","choices","inclusive","describe","handler","argv","config","loadConfig","map","MapMaker","excludeDisconnected","inputGlob","input","saveAs","SaveAsFilePlugin","outputDir","verbose","watch","process","load"],"mappings":";;;;;;;AAAA;;AAEO,IAAMA,4BAAU,+BAAhB;AACA,IAAMC,sBAAO,wCAAb;AACA,IAAMC,4BAAU;AACrBC,0BAAwB;AACtBC,WAAO,qBADe;AAEtBC,UAAM,QAFgB;AAGtBC,aAAS,CAAC,KAAD,EAAO,QAAP,EAAgB,OAAhB,EAAwB,iBAAxB,EAA0C,gBAA1C;AAHa,GADH;AAMrBC,aAAW;AACTF,UAAM,SADG;AAETG,cAAU;AAFD;AANU,CAAhB;AAWA,IAAMC,4BAAU,SAAVA,OAAU,CAASC,IAAT,EAAc;AACnC,MAAIC,SAAS,WAAIC,UAAJ,CAAeF,KAAKC,MAApB,CAAb;;AAEAA,SAAOE,GAAP,GAAaF,OAAOE,GAAP,IAAaF,OAAOG,QAApB,IAA+B,EAA5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAGJ,KAAKP,sBAAR,EAA+B;AAC7BQ,WAAOE,GAAP,CAAWV,sBAAX,GAAoCO,KAAKP,sBAAzC;AACD;AACD,MAAGO,KAAKH,SAAR,EAAkB;AAChBI,WAAOE,GAAP,CAAWE,mBAAX,GAAiC,KAAjC;AACD;AACD,MAAGL,KAAKM,SAAR,EAAkB;AAChBL,WAAOM,KAAP,GAAeP,KAAKM,SAApB;AACD;AACDL,SAAOO,MAAP,GAAgBP,OAAOO,MAAP,IAAgBP,OAAOQ,gBAAvB,IAA0C,EAA1D;AACA,MAAGT,KAAKU,SAAR,EAAkB;AAChBT,WAAOO,MAAP,CAAcE,SAAd,GAA0BV,KAAKU,SAA/B;AACD;AACDT,SAAOU,OAAP,GAAiBX,KAAKW,OAAL,IAAeV,OAAOU,OAAvC;AACAV,SAAOW,KAAP,GAAeZ,KAAKY,KAAL,IAAaX,OAAOW,KAAnC;AACAX,SAAOY,OAAP,GAAiB,CAAC,cAAD,EAAgB,cAAhB,EAA+B,eAA/B,CAAjB;AACA,aAAIC,IAAJ,CAASb,MAAT;AACD,CA3BM","file":"ArgMLCommand.js","sourcesContent":["import {app} from '../index.js';\n\nexport const command = 'argml [inputGlob] [outputDir]';\nexport const desc = 'export Argdown input as .graphml files';\nexport const builder = {\n  statementSelectionMode: {\n    alias: 'statement-selection',\n    type: 'string',\n    choices: ['all','titled','roots','statement-trees','with-relations'],\n  },\n  inclusive: {\n    type: 'boolean',\n    describe: 'Include disconnected nodes.'\n  },\n};\nexport const handler = function(argv){\n  let config = app.loadConfig(argv.config);\n  \n  config.map = config.map ||config.MapMaker ||{};\n  // if(argv.argumentLabelMode){\n  //   config.map.argumentLabelMode = argv.argumentLabelMode;        \n  // }\n  // if(argv.statementLabelMode){\n  //   config.map.statementLabelMode = argv.statementLabelMode;        \n  // }\n  if(argv.statementSelectionMode){\n    config.map.statementSelectionMode = argv.statementSelectionMode;\n  }\n  if(argv.inclusive){\n    config.map.excludeDisconnected = false;\n  }\n  if(argv.inputGlob){\n    config.input = argv.inputGlob;\n  }\n  config.saveAs = config.saveAs ||config.SaveAsFilePlugin ||{};\n  if(argv.outputDir){\n    config.saveAs.outputDir = argv.outputDir;\n  }\n  config.verbose = argv.verbose ||config.verbose;\n  config.watch = argv.watch ||config.watch;\n  config.process = [\"preprocessor\",\"export-argml\",\"save-as-argml\"];\n  app.load(config);  \n} \n"]}